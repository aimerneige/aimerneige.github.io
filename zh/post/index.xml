<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>文章 📝 on AimerNeige&#39;s Blog</title>
    <link>https://aimerneige.com/zh/post/</link>
    <description>Recent content in 文章 📝 on AimerNeige&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 17 Aug 2021 07:16:04 +0800</lastBuildDate><atom:link href="https://aimerneige.com/zh/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Hello Hugo</title>
      <link>https://aimerneige.com/zh/post/hello-hugo/</link>
      <pubDate>Tue, 17 Aug 2021 07:16:04 +0800</pubDate>
      
      <guid>https://aimerneige.com/zh/post/hello-hugo/</guid>
      <description>安装和配置 hugo</description>
    </item>
    
    <item>
      <title>使用 nodejs 快速为 Android 程序构建 API</title>
      <link>https://aimerneige.com/zh/post/build-api-with-nodejs-quickly/</link>
      <pubDate>Sat, 30 Jan 2021 20:17:30 +0800</pubDate>
      
      <guid>https://aimerneige.com/zh/post/build-api-with-nodejs-quickly/</guid>
      <description>使用 nodejs 开发简单后端</description>
    </item>
    
    <item>
      <title>利用 EditorConfig 定义代码格式，统一代码风格</title>
      <link>https://aimerneige.com/zh/post/editorconfig/</link>
      <pubDate>Fri, 29 Jan 2021 16:37:25 +0800</pubDate>
      
      <guid>https://aimerneige.com/zh/post/editorconfig/</guid>
      <description>EditorConfig 的简要介绍</description>
    </item>
    
    <item>
      <title>Linux 下安装 fcitx5 与 Rime</title>
      <link>https://aimerneige.com/zh/post/install-fcitx5-with-rime-on-linux/</link>
      <pubDate>Sun, 13 Dec 2020 19:35:18 +0800</pubDate>
      
      <guid>https://aimerneige.com/zh/post/install-fcitx5-with-rime-on-linux/</guid>
      <description>Linux 下中文输入法安装</description>
    </item>
    
    <item>
      <title>每天一个 Linux 指令</title>
      <link>https://aimerneige.com/zh/post/daily-linux-command/</link>
      <pubDate>Tue, 10 Nov 2020 10:41:51 +0800</pubDate>
      
      <guid>https://aimerneige.com/zh/post/daily-linux-command/</guid>
      <description>ifconfig ➜ ~ ifconfig enx2c16dba37d18: flags=4163&amp;lt;UP,BROADCAST,RUNNING,MULTICAST&amp;gt; mtu 1500 inet 10.0.117.154 netmask 255.255.255.0 broadcast 10.0.117.255 inet6 2001:250:c00:218:5bd6:795c:5b92:e787 prefixlen 64 scopeid 0x0&amp;lt;global&amp;gt; inet6 fe80::2224:6ee:2527:f54d prefixlen 64 scopeid 0x20&amp;lt;link&amp;gt; inet6 2001:250:c00:218:44fc:ad73:aeb8:b07d prefixlen 64 scopeid 0x0&amp;lt;global&amp;gt; ether 2c:16:db:a3:7d:18 txqueuelen 1000 (Ethernet) RX packets 110382 bytes 150904005 (150.9 MB) RX errors 0 dropped 0 overruns 0 frame 0 TX packets 30811 bytes 3569027 (3.5 MB) TX errors 0 dropped 0 overruns 0 carrier 0 collisions 0 lo: flags=73&amp;lt;UP,LOOPBACK,RUNNING&amp;gt; mtu 65536 inet 127.</description>
    </item>
    
    <item>
      <title>这不是 Bug，而是语言特性</title>
      <link>https://aimerneige.com/zh/post/this-is-not-bug/</link>
      <pubDate>Thu, 05 Nov 2020 14:37:41 +0800</pubDate>
      
      <guid>https://aimerneige.com/zh/post/this-is-not-bug/</guid>
      <description>C 语言中 goto 带来的奇怪问题</description>
    </item>
    
    <item>
      <title>C 函数指针</title>
      <link>https://aimerneige.com/zh/post/c-function-point/</link>
      <pubDate>Wed, 04 Nov 2020 21:00:39 +0800</pubDate>
      
      <guid>https://aimerneige.com/zh/post/c-function-point/</guid>
      <description>函数指针用法</description>
    </item>
    
    <item>
      <title>C 语言多线程基础</title>
      <link>https://aimerneige.com/zh/post/c-thread-basic/</link>
      <pubDate>Sun, 01 Nov 2020 18:21:23 +0800</pubDate>
      
      <guid>https://aimerneige.com/zh/post/c-thread-basic/</guid>
      <description>thread 线程 有共享内存   process 进程 没有共享内存    gcc file.c -lpthread 创建线程
#include &amp;lt;stdio.h&amp;gt;#include &amp;lt;pthread.h&amp;gt; void *myfunc(void *args) { for (int i = 0; i &amp;lt; 50; i++) { printf(&amp;#34;%d\n&amp;#34;, i); } return NULL; } int main() { pthread_t th1; pthread_t th2; pthread_create(&amp;amp;th1, NULL, myfunc, NULL); pthread_create(&amp;amp;th2, NULL, myfunc, NULL); pthread_join(th1, NULL); pthread_join(th2, NULL); return 0; } 传入参数</description>
    </item>
    
    <item>
      <title>C 语言静态函数</title>
      <link>https://aimerneige.com/zh/post/c-static-function/</link>
      <pubDate>Sat, 31 Oct 2020 20:31:36 +0800</pubDate>
      
      <guid>https://aimerneige.com/zh/post/c-static-function/</guid>
      <description>在 C 语言中，函数默认是全局的。在函数前加“static”关键字可以使一个函数变成静态函数。例如，下面的函数 fun() 是静态的：
static int fun(void) { printf(&amp;#34;I am a static funciton.\n&amp;#34;); } 与 C 语言中的全局函数不同，对静态函数的访问仅限于声明它们的文件。因此，当我们想要限制函数的访问时，我们可以将函数定义为静态的。另外，如果我们想要在其他文件中使用相同的函数名，我们也可以将函数定义为静态的。
例如，我们在文件 file.c 中存储了下面的程序：
// in file `file1.c` #include &amp;lt;stdio.h&amp;gt; static void fun1() { printf(&amp;#34;fun1 called.\n&amp;#34;); } 然后，我们在文件 file2.c 中存储了这样的程序：
// in file `file2.c` #include &amp;lt;stdio.h&amp;gt; int main(void) { fun1(); return 0; } 接下来，如果我们按照如下的命令编译：
gcc file2.c file1.c 你会得到这样的链接错误：
undefined reference to `fun1&amp;#39; 这是因为 fun1() 函数在 file1.c 中被定义为静态，因而不能在 file2.c 中引用。</description>
    </item>
    
    <item>
      <title>在 Windows10 安装和配置 alacritty</title>
      <link>https://aimerneige.com/zh/post/alacritty-on-windows/</link>
      <pubDate>Thu, 22 Oct 2020 15:15:19 +0800</pubDate>
      
      <guid>https://aimerneige.com/zh/post/alacritty-on-windows/</guid>
      <description>注意将本文章提到的路径中 AimerNeige 修改为自己的用户名，之后不再赘述。
 安装 alacritty 按照自己的喜好 在 GitHub 下载最新版 release 或自己编译。
本次演示中可执行文件存储目录：
‪C:\Tools\Alacritty\alacritty.exe
配置 alacritty 将配置文件放置在如下目录：
C:\Users\AimerNeige\AppData\Roaming\alacritty\alacritty.yml
配置方法和 Linux 下类似。
我的配置文件
将 alacrity 注册为右键菜单启动 新建文本文件，填入如下内容，修改后缀为 .reg 运行，将配置写入注册表。
Windows Registry Editor Version 5.00 [HKEY_CLASSES_ROOT\Directory\Background\shell\alacritty] @=&amp;quot;Alacritty terminal here&amp;quot; &amp;quot;Icon&amp;quot;=&amp;quot;C:\\Tools\\Alacritty\\alacritty.ico&amp;quot; [HKEY_CLASSES_ROOT\Directory\Background\shell\alacritty\command] @=&amp;quot;C:\\Tools\\Alacritty\\alacritty.exe&amp;quot; 当然，你也可以按照自己的喜好手动编辑注册表。
其中 Icon 这一行中使用的的图标文件可以在 GitHub 官方仓库 下载，或者也可以使用自己喜欢的内容。
你也可以将 @=&amp;quot;Alacritty terminal here&amp;quot; 修改为自己喜欢的内容。</description>
    </item>
    
  </channel>
</rss>
