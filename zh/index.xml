<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>AimerNeige&#39;s Blog</title>
    <link>https://aimerneige.com/zh/</link>
    <description>Recent content on AimerNeige&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 10 Nov 2022 12:03:27 +0800</lastBuildDate><atom:link href="https://aimerneige.com/zh/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>在 Fedora 系统下安装微信</title>
      <link>https://aimerneige.com/zh/post/linux/install-wechat-on-fedora/</link>
      <pubDate>Thu, 10 Nov 2022 12:03:27 +0800</pubDate>
      
      <guid>https://aimerneige.com/zh/post/linux/install-wechat-on-fedora/</guid>
      <description>在 Fedora 下运行微信 安装 wine sudo dnf install wine 调整缩放比例 输入下面的指令打开 winecfg
winecfg 在 Graphics 一栏中调整合适的 dpi 以保证有舒适的使用体验。（4k 屏幕，192 dpi）
下载并配置字体 依次执行如下指令即可
sudo dnf install cabextract sudo dnf install winetricks winetricks corefonts gdiplus riched20 riched30 下载并安装微信 直接下载官方的 exe 安装包（在网页下载也是一样的）
wget https://dldir1.qq.com/weixin/Windows/WeChatSetup.exe 使用 wine 启动微信
wine ./WeChatSetup.exe 接下来按照 Windows 的安装逻辑点击下一步安装好微信
安装结束后可以删除安装包
修改语言设置 修改这个文件
vim ~/.local/share/applications/wine/Programs/WeChat/WeChat.desktop 调整 Exec 这一部分，添加如下环境变量
env LC_ALL=&amp;#34;zh_CN.UTF8&amp;#34; 最终结果应该是这样（注意路径）
[Desktop Entry] Name=WeChat Exec=env LC_ALL=&amp;#34;zh_CN.UTF8&amp;#34; env WINEPREFIX=&amp;#34;/home/aimer/.wine&amp;#34; wine C:\\\\ProgramData\\\\Microsoft\\\\Windows\\\\Start\\ Menu\\\\Programs\\\\WeChat\\\\WeChat.lnk Type=Application StartupNotify=true Path=/home/aimer/.</description>
    </item>
    
    <item>
      <title>Golang embed</title>
      <link>https://aimerneige.com/zh/post/go/go-embed/</link>
      <pubDate>Sat, 13 Aug 2022 23:57:11 +0800</pubDate>
      
      <guid>https://aimerneige.com/zh/post/go/go-embed/</guid>
      <description>前言 在写项目的时候，有时候不可避免地要处理静态文件，如果将源码直接作为软件提供问题不大，使用相对路径读取这些静态文件就可以了。但是如果项目作为库向外公布显然不可行，使用相对路径是读取不到文件的，而使用绝对路径却会带来更大的问题：因为不同的人使用，路径绝对不可能完全一致的。如果要求用户在指定路径下放置这些依赖的静态文件，虽然可行但是会给用户带来很大的困扰，而且这样的实现方式显然不够优雅。这时候，将这些静态文件一起打包进可执行文件似乎是一个完美的解决方案，那么如何实现呢？最简单的方法是硬编码，将静态文件以文本或字节数组的形式直接编入源代码，go 也有一些库帮你自动生成代码，比如 go-bindata。很明显，这个库已经终止维护了，这是因为在 go 1.16 版本，官方发布了 embed 完美地解决了这个问题。本文简要介绍 embed 的一些基础用法。
embed 假设我们有一个文件 hello.txt
Hello World! Hello go embed! 我们要写一个程序读取其中的内容并输出到终端：
// file: main.go package main  import ( 	&amp;#34;fmt&amp;#34; 	&amp;#34;os&amp;#34; )  func main() { 	s, err := os.ReadFile(&amp;#34;./hello.txt&amp;#34;) 	if err != nil { 	panic(err) 	} 	fmt.Println(string(s)) } 很简单，不是吗？
➜ tree . . ├── go.mod ├── hello.txt └── main.go  0 directories, 3 files  ➜ go build main.</description>
    </item>
    
    <item>
      <title>Go 图像处理基础</title>
      <link>https://aimerneige.com/zh/post/go/go-image-processing-basic/</link>
      <pubDate>Fri, 12 Aug 2022 22:40:28 +0800</pubDate>
      
      <guid>https://aimerneige.com/zh/post/go/go-image-processing-basic/</guid>
      <description>前言 Go 语言的官方包 image 和 image/color 定义了非常多的类型，涵盖了很多的图像处理基础内容，本文简单介绍这些库中的基本概念和使用方法。
常见类型介绍 Colors Colors 是一个接口，它的代码如下：
type Color interface { 	// RGBA returns the alpha-premultiplied red, green, blue and alpha values 	// for the color. Each value ranges within [0, 0xffff], but is represented 	// by a uint32 so that multiplying by a blend factor up to 0xffff will not 	// overflow. 	// 	// An alpha-premultiplied color component c has been scaled by alpha (a), 	// so has valid values 0 &amp;lt;= c &amp;lt;= a.</description>
    </item>
    
    <item>
      <title>[转载] Rust 大佬给初学者的学习建议</title>
      <link>https://aimerneige.com/zh/post/rust/re-learning-rust-in-2022/</link>
      <pubDate>Wed, 29 Jun 2022 07:57:57 +0800</pubDate>
      
      <guid>https://aimerneige.com/zh/post/rust/re-learning-rust-in-2022/</guid>
      <description>本文章转载自 Rustt
 简介 当我开始学习 Rust 的时候，我犯了一个错误，那就是先读《The Rust Programming Language》。虽然这是一本非常好的资料，但让新手一开始就阅读这本 20 个章节的书籍，简直令人望而生畏，大多数人还没开始就放弃了。没有人会让一个刚开始学习 JavaScript 或者 Python 的人去阅读一本 20 个章节的书籍。Rust 学习曲线非常陡峭的，但只要循序渐进的学习一定也能学有所成。
摘要 如果你是一个完完全全的 Rust 小白，想要在一天中尽可能多的学习 Rust，那我推荐你去阅读 fasterthanlime 的《半小时快速了解 Rust》，然后完成 Rustlings 项目中的练习。
如果你已经学过 Rust 的基本语法，你可以试着做一下 Exercism.io 网站上的 Rust 部分。如果你遇到了问题，你可以在 Google 或者 StackOverflow 上寻求帮助。我推荐你花点时间来简单的阅读和浏览一下《Rust Standard Library Docs》，它是一个很棒的学习资料，里面有一些简单且实用例子去帮助你更好的使用 Rust 的标准库。《Rust by Example》也是一本高质量的参考资料，你可以通过他快速的学习 Rust 的语法和特性。如果你想要更深入的理解 Rust 的某一个概念，那么我推荐你在《The Rust Programming Language》这本书中寻找相关的章节去阅读。尤其推荐在 Exercism.io 上进行练习。在完成每个题目之后，你可以查看其他所有人的题解，可以按点赞数排序来找到通俗易懂并且巧妙的题解。这是一种很棒的学习方式。
此时，你可能已经是一个高级的初学者，能够找到属于自己的学习路线。但，如果你还需要更多的指导并想要尝试用 Rust 来写一些简单的程序，我推荐你试一着做一下 Advent of Code 2018 Calendar 上的练习。为什么推荐你做 2018 年的题目呢？因为当你做完了这个练习，你可以和 BurntSushi 提供的答案（ BurntSushi&amp;rsquo;s Advent of Code 2018 Rust solutions）进行对比。BurntSushi 写的 Rust 代码整洁、可读性强、通俗易懂。阅读一个有经验的 Rustacean 的代码将会使你受益无穷。</description>
    </item>
    
    <item>
      <title>如何配置新购置的 Linux 服务器</title>
      <link>https://aimerneige.com/zh/post/devops/how-to-setup-your-new-linux-server/</link>
      <pubDate>Tue, 17 May 2022 22:09:41 +0800</pubDate>
      
      <guid>https://aimerneige.com/zh/post/devops/how-to-setup-your-new-linux-server/</guid>
      <description>更新系统 # Debian apt update # Fedora dnf update 安装常用工具 # Debain apt install -y neofetch htop tree ncdu ranger zsh vim neovim git curl wget # Fedora dnf install -y neofetch htop tree ncdu ranger zsh vim neovim git curl wget util-linux-user 创建 sudo 用户 # Debian adduser aimerneige usermod -aG sudo aimerneige # Fedora useradd -G wheel aimerneige passwd aimerneige 测试 root 权限 su - aimerneige sudo cat /etc/shadow 配置 SSH 连接密钥 # 在你的本地环境执行这条指令 ssh-copy-id aimerneige@server 测试连通性 ssh aimerneige@server 禁用 root 和密码登录 sudo vim /etc/ssh/sshd_config  将 PermitRootLogin 修改为 no 可以禁用 root 用户登录 将 PasswordAuthentication 修改为 no 可以禁用密码登录  设置 sudo 免密码 sudo visudo 在末尾添加如下内容</description>
    </item>
    
    <item>
      <title>在 wsl 下安装 fedora 35</title>
      <link>https://aimerneige.com/zh/post/others/install-fedora35-on-wsl/</link>
      <pubDate>Sat, 09 Apr 2022 22:22:44 +0800</pubDate>
      
      <guid>https://aimerneige.com/zh/post/others/install-fedora35-on-wsl/</guid>
      <description>安装 wsl2 使用管理员身份开启 windows terminal.
执行如下指令：
wsl.exe --install 等待安装完成后在开始菜单执行重启(Restart)
.notice{--root-color:#444;--root-background:#eff;--title-color:#fff;--title-background:#7bd;--warning-title:#c33;--warning-content:#fee;--info-title:#fb7;--info-content:#fec;--note-title:#6be;--note-content:#e7f2fa;--tip-title:#5a5;--tip-content:#efe}@media (prefers-color-scheme:dark){.notice{--root-color:#ddd;--root-background:#eff;--title-color:#fff;--title-background:#7bd;--warning-title:#800;--warning-content:#400;--info-title:#a50;--info-content:#420;--note-title:#069;--note-content:#023;--tip-title:#363;--tip-content:#121}}body.dark .notice{--root-color:#ddd;--root-background:#eff;--title-color:#fff;--title-background:#7bd;--warning-title:#800;--warning-content:#400;--info-title:#a50;--info-content:#420;--note-title:#069;--note-content:#023;--tip-title:#363;--tip-content:#121}.notice{padding:18px;line-height:24px;margin-bottom:24px;border-radius:4px;color:var(--root-color);background:var(--root-background)}.notice p:last-child{margin-bottom:0}.notice-title{margin:-18px -18px 12px;padding:4px 18px;border-radius:4px 4px 0 0;font-weight:700;color:var(--title-color);background:var(--title-background)}.notice.warning .notice-title{background:var(--warning-title)}.notice.warning{background:var(--warning-content)}.notice.info .notice-title{background:var(--info-title)}.notice.info{background:var(--info-content)}.notice.note .notice-title{background:var(--note-title)}.notice.note{background:var(--note-content)}.notice.tip .notice-title{background:var(--tip-title)}.notice.tip{background:var(--tip-content)}.icon-notice{display:inline-flex;align-self:center;margin-right:8px}.icon-notice img,.icon-notice svg{height:1em;width:1em;fill:currentColor}.icon-notice img,.icon-notice.baseline svg{top:.125em;position:relative} Warning
注意是在开始菜单选择 Restart 而不能是选择 Shut Down 关机之后手动开机。
 安装过程中系统会自动下载 Ubuntu 的子系统，重启后会弹出 ubuntu 的命令行初始界面，输入用户名和密码即可开始使用 ubuntu 子系统。
执行下面的指令设置 wsl 默认版本为 wsl2：
wsl --set-default-version 2 安装其他版本的子系统 如果你想要其他版本的子系统，可以执行如下指令获取可通过 wsl 指令直接安装的发行版列表：
wsl --list --online 返回数据类似下面这样：
The following is a list of valid distributions that can be installed. Install using &amp;#39;wsl --install -d &amp;lt;Distro&amp;gt;&amp;#39;.</description>
    </item>
    
    <item>
      <title>find 指令的基本用法</title>
      <link>https://aimerneige.com/zh/post/linux/basic-usage-of-find/</link>
      <pubDate>Sat, 12 Mar 2022 19:36:29 +0800</pubDate>
      
      <guid>https://aimerneige.com/zh/post/linux/basic-usage-of-find/</guid>
      <description>什么是 find 正如它的名字一样，find 指令用于查找文件。
 Linux find 命令用来在指定目录下查找文件。任何位于参数之前的字符串都将被视为欲查找的目录名。如果使用该命令时，不设置任何参数，则 find 命令将在当前目录下查找子目录与文件。并且将查找到的子目录和文件全部进行显示。
来源: 菜鸟教程
  The find command in UNIX is a command line utility for walking a file hierarchy. It can be used to find files and directories and perform subsequent operations on them. It supports searching by file, folder, name, creation date, modification date, owner and permissions. By using the ‘-exec’ other UNIX commands can be executed on files or folders found.</description>
    </item>
    
    <item>
      <title>使用 vscode 开发 Spring 项目</title>
      <link>https://aimerneige.com/zh/post/java/start-develop-spring-project-on-vscode/</link>
      <pubDate>Tue, 28 Dec 2021 15:37:39 +0800</pubDate>
      
      <guid>https://aimerneige.com/zh/post/java/start-develop-spring-project-on-vscode/</guid>
      <description>前言 毫无疑问，idea 是最好的 Java IDE 之一，它对 Spring 也有很好的支持，但是由于某高校的 JetBrains 授权被拉入黑名单，导致我无法继续使用正版授权，虽然可以通过给 JetBrains 写邮件，证明自己高校学生的身份后继续获取授权，但是实在是懒，而且我也不是很喜欢使用 IDE，于是就就打算使用 vscode 进行开发。
Visual Studio Code 作为一款优秀的代码编辑器，有非常多的插件，经过配置后完全可以胜任大部分 IDE 的功能，本文章简要介绍如何构建 spring 的开发环境。
配置 安装配置 Java 和 Maven .notice{--root-color:#444;--root-background:#eff;--title-color:#fff;--title-background:#7bd;--warning-title:#c33;--warning-content:#fee;--info-title:#fb7;--info-content:#fec;--note-title:#6be;--note-content:#e7f2fa;--tip-title:#5a5;--tip-content:#efe}@media (prefers-color-scheme:dark){.notice{--root-color:#ddd;--root-background:#eff;--title-color:#fff;--title-background:#7bd;--warning-title:#800;--warning-content:#400;--info-title:#a50;--info-content:#420;--note-title:#069;--note-content:#023;--tip-title:#363;--tip-content:#121}}body.dark .notice{--root-color:#ddd;--root-background:#eff;--title-color:#fff;--title-background:#7bd;--warning-title:#800;--warning-content:#400;--info-title:#a50;--info-content:#420;--note-title:#069;--note-content:#023;--tip-title:#363;--tip-content:#121}.notice{padding:18px;line-height:24px;margin-bottom:24px;border-radius:4px;color:var(--root-color);background:var(--root-background)}.notice p:last-child{margin-bottom:0}.notice-title{margin:-18px -18px 12px;padding:4px 18px;border-radius:4px 4px 0 0;font-weight:700;color:var(--title-color);background:var(--title-background)}.notice.warning .notice-title{background:var(--warning-title)}.notice.warning{background:var(--warning-content)}.notice.info .notice-title{background:var(--info-title)}.notice.info{background:var(--info-content)}.notice.note .notice-title{background:var(--note-title)}.notice.note{background:var(--note-content)}.notice.tip .notice-title{background:var(--tip-title)}.notice.tip{background:var(--tip-content)}.icon-notice{display:inline-flex;align-self:center;margin-right:8px}.icon-notice img,.icon-notice svg{height:1em;width:1em;fill:currentColor}.icon-notice img,.icon-notice.baseline svg{top:.125em;position:relative} Tip
正常流程配置 Java 和 Maven，如果你已经配置过可以直接跳过
  下载所需的 JDK 并解压。 在环境变量中配置 JAVA_HOME 在系统环境变量 PATH 中添加 JAVA_HOME/bin 下载 Maven 并解压 在环境变量中配置 MAVEN_HOME 在系统环境变量 PATH 中添加 MAVEN_HOME/bin  安装必要插件  Extension Pack For Java Gradle Extension Pack Spring Boot Extension Pack SonarLint Java Code Generators XML Dependency Analytics  在 settings.</description>
    </item>
    
    <item>
      <title>配置 go 开发环境</title>
      <link>https://aimerneige.com/zh/post/go/go-env-setup-for-beginner/</link>
      <pubDate>Tue, 24 Aug 2021 21:31:05 +0800</pubDate>
      
      <guid>https://aimerneige.com/zh/post/go/go-env-setup-for-beginner/</guid>
      <description>本篇文章简要介绍如何配置 go 的开发环境</description>
    </item>
    
    <item>
      <title>对于某实验平台的吐槽</title>
      <link>https://aimerneige.com/zh/post/others/complaints-about-stupid-lab-platform/</link>
      <pubDate>Thu, 19 Aug 2021 21:44:21 +0800</pubDate>
      
      <guid>https://aimerneige.com/zh/post/others/complaints-about-stupid-lab-platform/</guid>
      <description>今天学校不知道哪搞了个平台，让我们去上面做模拟实验，我点开一看，好嘛，没啥用的机器人、电焊，继续看下去还有题目，又懒得上网查答案，但是学校给的通知里有一行话引起了我的注意:
 温馨提示:需要从实验空间进入实验,不可直接输入网址进入
 不可直接输入网址？我仔细看了下，发现实验空间的作用就是添加一个 token，如果直接进去就是游客，没有办法登录。
这下就好办了啊，虽然是游客，但是游客也可以做题啊，我用游客帐号先做了不就拿到答案了吗？
这个系统果然把正确答案显示在前端了，但是不太好看，于是我就跑去 F12 看了。
结果我在后台找到了下面的代码:
$.ajax({ 	url: &amp;#34;/webApi/experimen/rig/getData&amp;#34;, 	type: &amp;#34;GET&amp;#34;, 	data: { courseId: courseId }, 	dataType: &amp;#34;JSON&amp;#34;, 	success: function (res) {   // 省略的大量代码逻辑   })；  下面的注释是原来就有，不是我加的。
对，这个系统没有对 js 做混淆甚至在代码里有详细的注释。
 // 单选 var answer = $(&amp;#39;.afterTesting .topic1 form&amp;#39;); for (var k = 0; k &amp;lt; answer.length; k++) {  var question1 = $(answer[k]).find(&amp;#34;.question1&amp;#34;);  var questionAnswer = question1.</description>
    </item>
    
    <item>
      <title>定制你的 rime 提升编程体验</title>
      <link>https://aimerneige.com/zh/post/linux/diy-your-rime-for-better-coding/</link>
      <pubDate>Thu, 19 Aug 2021 01:50:11 +0800</pubDate>
      
      <guid>https://aimerneige.com/zh/post/linux/diy-your-rime-for-better-coding/</guid>
      <description>平时在使用 Linux 写代码的时候，总有一点让我很难受，那就是当我准备写中文注释的时候，输入 // 的时候，输入法总是希望我手动选择是要输入 / 还是中文的 、，随之弹出来的框非常影响代码编辑，经常打断我的思路，类似的还有反引号等符号，不厌其烦的我去查找了一些资料，终于彻底解决了这个问题。
 准备 阅读本文前，你要保证你在使用 rime 输入法。遇到任何问题请多查阅 rime 提供的文档。
本文所提到的内容在 fedora34 系统下，ibus-rime 包测试通过。
找到 rime 用户资料夹 不同的平台下，rime 用户资料夹的位置会有所不同
   平台 rime 用户资料夹位置     ibus ~/.config/ibus/rime   fcitx ~/.config/fcitx/rime   fcitx5 ~/.local/share/fcitx5/rime    创建你的配置文件 如果你从来没有配置过 rime，那么你可以直接在 rime 用户资料夹下创建名为 default.custom.yaml 的配置文件，写入如下内容:
patch:  punctuator/full_shape:  &amp;#34;`&amp;#34;: &amp;#34;｀&amp;#34;  &amp;#34;~&amp;#34;: &amp;#34;～&amp;#34;  &amp;#34;!&amp;#34;: &amp;#34;！&amp;#34;  &amp;#34;@&amp;#34;: &amp;#34;＠&amp;#34;  &amp;#34;#&amp;#34;: &amp;#34;＃&amp;#34;  &amp;#34;$&amp;#34;: &amp;#34;￥&amp;#34;  &amp;#34;%&amp;#34;: &amp;#34;％&amp;#34;  &amp;#34;^&amp;#34;: &amp;#34;……&amp;#34;  &amp;#34;&amp;amp;&amp;#34;: &amp;#34;＆&amp;#34;  &amp;#34;*&amp;#34;: &amp;#34;×&amp;#34;  &amp;#34;(&amp;#34;: &amp;#34;（&amp;#34;  &amp;#34;)&amp;#34;: &amp;#34;）&amp;#34;  &amp;#34;_&amp;#34;: &amp;#34;——&amp;#34;  &amp;#34;+&amp;#34;: &amp;#34;＋&amp;#34;  &amp;#34;-&amp;#34;: &amp;#34;－&amp;#34;  &amp;#34;=&amp;#34;: &amp;#34;＝&amp;#34;  &amp;#34;[&amp;#34;: &amp;#34;【&amp;#34;  &amp;#34;]&amp;#34;: &amp;#34;】&amp;#34;  &amp;#34;{&amp;#34;: &amp;#34;｛&amp;#34;  &amp;#34;}&amp;#34;: &amp;#34;｝&amp;#34;  &amp;#34;|&amp;#34;: &amp;#34;｜&amp;#34;  &amp;#34;\\&amp;#34;: &amp;#34;、&amp;#34;  &amp;#34;/&amp;#34;: &amp;#34;、&amp;#34;  &amp;#34;;&amp;#34;: &amp;#34;；&amp;#34;  &amp;#34;&amp;#39;&amp;#34;: &amp;#34;‘&amp;#34;  &amp;#34;,&amp;#34;: &amp;#34;，&amp;#34;  &amp;#34;.</description>
    </item>
    
    <item>
      <title>Hello Hugo</title>
      <link>https://aimerneige.com/zh/post/others/hello-hugo/</link>
      <pubDate>Tue, 17 Aug 2021 07:16:04 +0800</pubDate>
      
      <guid>https://aimerneige.com/zh/post/others/hello-hugo/</guid>
      <description>安装和配置 hugo</description>
    </item>
    
    <item>
      <title>使用 nodejs 快速为 Android 程序构建 API</title>
      <link>https://aimerneige.com/zh/post/javascript/build-api-with-nodejs-quickly/</link>
      <pubDate>Sat, 30 Jan 2021 20:17:30 +0800</pubDate>
      
      <guid>https://aimerneige.com/zh/post/javascript/build-api-with-nodejs-quickly/</guid>
      <description>使用 nodejs 开发简单后端</description>
    </item>
    
    <item>
      <title>利用 EditorConfig 定义代码格式，统一代码风格</title>
      <link>https://aimerneige.com/zh/post/tool/editorconfig/</link>
      <pubDate>Fri, 29 Jan 2021 16:37:25 +0800</pubDate>
      
      <guid>https://aimerneige.com/zh/post/tool/editorconfig/</guid>
      <description>EditorConfig 的简要介绍</description>
    </item>
    
    <item>
      <title>Linux 下安装 fcitx5 与 Rime</title>
      <link>https://aimerneige.com/zh/post/linux/install-fcitx5-with-rime-on-linux/</link>
      <pubDate>Sun, 13 Dec 2020 19:35:18 +0800</pubDate>
      
      <guid>https://aimerneige.com/zh/post/linux/install-fcitx5-with-rime-on-linux/</guid>
      <description>Linux 下中文输入法安装</description>
    </item>
    
    <item>
      <title>每天一个 Linux 指令</title>
      <link>https://aimerneige.com/zh/post/linux/daily-linux-command/</link>
      <pubDate>Tue, 10 Nov 2020 10:41:51 +0800</pubDate>
      
      <guid>https://aimerneige.com/zh/post/linux/daily-linux-command/</guid>
      <description>ifconfig ➜ ~ ifconfig enx2c16dba37d18: flags=4163&amp;lt;UP,BROADCAST,RUNNING,MULTICAST&amp;gt; mtu 1500  inet 10.0.117.154 netmask 255.255.255.0 broadcast 10.0.117.255  inet6 2001:250:c00:218:5bd6:795c:5b92:e787 prefixlen 64 scopeid 0x0&amp;lt;global&amp;gt;  inet6 fe80::2224:6ee:2527:f54d prefixlen 64 scopeid 0x20&amp;lt;link&amp;gt;  inet6 2001:250:c00:218:44fc:ad73:aeb8:b07d prefixlen 64 scopeid 0x0&amp;lt;global&amp;gt;  ether 2c:16:db:a3:7d:18 txqueuelen 1000 (Ethernet)  RX packets 110382 bytes 150904005 (150.9 MB)  RX errors 0 dropped 0 overruns 0 frame 0  TX packets 30811 bytes 3569027 (3.5 MB)  TX errors 0 dropped 0 overruns 0 carrier 0 collisions 0  lo: flags=73&amp;lt;UP,LOOPBACK,RUNNING&amp;gt; mtu 65536  inet 127.</description>
    </item>
    
    <item>
      <title>这不是 Bug，而是语言特性</title>
      <link>https://aimerneige.com/zh/post/c/this-is-not-bug/</link>
      <pubDate>Thu, 05 Nov 2020 14:37:41 +0800</pubDate>
      
      <guid>https://aimerneige.com/zh/post/c/this-is-not-bug/</guid>
      <description>C 语言中 goto 带来的奇怪问题</description>
    </item>
    
    <item>
      <title>C 函数指针</title>
      <link>https://aimerneige.com/zh/post/c/c-function-point/</link>
      <pubDate>Wed, 04 Nov 2020 21:00:39 +0800</pubDate>
      
      <guid>https://aimerneige.com/zh/post/c/c-function-point/</guid>
      <description>函数指针用法</description>
    </item>
    
    <item>
      <title>C 语言多线程基础</title>
      <link>https://aimerneige.com/zh/post/c/c-thread-basic/</link>
      <pubDate>Sun, 01 Nov 2020 18:21:23 +0800</pubDate>
      
      <guid>https://aimerneige.com/zh/post/c/c-thread-basic/</guid>
      <description>线程于进程的对比
          thread 线程 有共享内存   process 进程 没有共享内存    gcc file.c -lpthread 创建线程
#include &amp;lt;stdio.h&amp;gt;#include &amp;lt;pthread.h&amp;gt; void *myfunc(void *args) {  for (int i = 0; i &amp;lt; 50; i++)  {  printf(&amp;#34;%d\n&amp;#34;, i);  }  return NULL; }  int main() {  pthread_t th1;  pthread_t th2;   pthread_create(&amp;amp;th1, NULL, myfunc, NULL);  pthread_create(&amp;amp;th2, NULL, myfunc, NULL);   pthread_join(th1, NULL);  pthread_join(th2, NULL);   return 0; } 传入参数</description>
    </item>
    
    <item>
      <title>C 语言静态函数</title>
      <link>https://aimerneige.com/zh/post/c/c-static-function/</link>
      <pubDate>Sat, 31 Oct 2020 20:31:36 +0800</pubDate>
      
      <guid>https://aimerneige.com/zh/post/c/c-static-function/</guid>
      <description>在 C 语言中，函数默认是全局的。在函数前加“static”关键字可以使一个函数变成静态函数。例如，下面的函数 fun() 是静态的：
static int fun(void) {  printf(&amp;#34;I am a static funciton.\n&amp;#34;); } 与 C 语言中的全局函数不同，对静态函数的访问仅限于声明它们的文件。因此，当我们想要限制函数的访问时，我们可以将函数定义为静态的。另外，如果我们想要在其他文件中使用相同的函数名，我们也可以将函数定义为静态的。
例如，我们在文件 file.c 中存储了下面的程序：
// in file `file1.c` #include &amp;lt;stdio.h&amp;gt; static void fun1() {  printf(&amp;#34;fun1 called.\n&amp;#34;); } 然后，我们在文件 file2.c 中存储了这样的程序：
// in file `file2.c` #include &amp;lt;stdio.h&amp;gt; int main(void) {  fun1();   return 0; } 接下来，如果我们按照如下的命令编译：
gcc file2.c file1.c 你会得到这样的链接错误：
undefined reference to `fun1&amp;#39; 这是因为 fun1() 函数在 file1.c 中被定义为静态，因而不能在 file2.c 中引用。</description>
    </item>
    
    <item>
      <title>在 Windows10 安装和配置 alacritty</title>
      <link>https://aimerneige.com/zh/post/others/alacritty-on-windows/</link>
      <pubDate>Thu, 22 Oct 2020 15:15:19 +0800</pubDate>
      
      <guid>https://aimerneige.com/zh/post/others/alacritty-on-windows/</guid>
      <description>注意将本文章提到的路径中 AimerNeige 修改为自己的用户名，之后不再赘述。
 安装 alacritty 按照自己的喜好 在 GitHub 下载最新版 release 或自己编译。
本次演示中可执行文件存储目录：
C:\Tools\Alacritty\alacritty.exe
配置 alacritty 将配置文件放置在如下目录：
C:\Users\AimerNeige\AppData\Roaming\alacritty\alacritty.yml
配置方法和 Linux 下类似。
我的配置文件
将 alacrity 注册为右键菜单启动 新建文本文件，填入如下内容，修改后缀为 .reg 运行，将配置写入注册表。
Windows Registry Editor Version 5.00 [HKEY_CLASSES_ROOT\Directory\Background\shell\alacritty] @=&amp;#34;Alacritty terminal here&amp;#34; &amp;#34;Icon&amp;#34;=&amp;#34;C:\\Tools\\Alacritty\\alacritty.ico&amp;#34; [HKEY_CLASSES_ROOT\Directory\Background\shell\alacritty\command] @=&amp;#34;C:\\Tools\\Alacritty\\alacritty.exe&amp;#34; 当然，你也可以按照自己的喜好手动编辑注册表。
其中 Icon 这一行中使用的的图标文件可以在 GitHub 官方仓库 下载，或者也可以使用自己喜欢的内容。
你也可以将 @=&amp;quot;Alacritty terminal here&amp;quot; 修改为自己喜欢的内容。</description>
    </item>
    
    <item>
      <title>GCC 基础</title>
      <link>https://aimerneige.com/zh/post/tool/gcc-basic/</link>
      <pubDate>Sat, 17 Oct 2020 22:37:01 +0800</pubDate>
      
      <guid>https://aimerneige.com/zh/post/tool/gcc-basic/</guid>
      <description>GCC 简介 GCC 是 Linux 下的编译工具集，是 GNU Compiler Collection 的缩写,包含 gcc 、 g++ 等编译器。这个工具集不仅包含编译器，还包含其他工具集，例如 ar 、 nm 等。
GCC 工具集不仅能编译 C/C++ 语言，其他例如 Objective-C 、 Pascal 、 Fortran 、 Java 、 Ada 等语言均能进行编译。
GCC 在可以根据不同的硬件平台进行编译，即能进行交叉编译，在 A 平台上编译 B 平台的程序，支持常见的 X86 、 ARM 、 PowerPC 、 mips 等，以及 Linux 、 Windows 等软件平台。
GCC 的 C 编译器 是 gcc，其命令格式为 :
Usage: gcc [options] file... GCC 下默认文扩展名的含义：
   文件扩展名 GCC 所理解的含义     *.</description>
    </item>
    
    <item>
      <title>使用 Nginx 搭建静态网页服务</title>
      <link>https://aimerneige.com/zh/post/tool/deploy-web-page-with-nginx/</link>
      <pubDate>Sun, 04 Oct 2020 01:18:44 +0800</pubDate>
      
      <guid>https://aimerneige.com/zh/post/tool/deploy-web-page-with-nginx/</guid>
      <description>使用 Nginx 搭建静态网页服务本身是一件非常简单的事，但是我之前在 CSDN 找了几篇教程，弄了一下午也没弄好（不愧是屎山淘金），学了一段时间后端和 Linux 后，我大概只用了五分钟就弄好了，这里写一篇文章来帮助一下小白。
 阅读须知 在阅读本文章前，你需要准备以下内容
 掌握基础的 Linux 命令行操作 （本文章将介绍如何在 Linux 服务器上部署静态网页，需要进行终端操作，因此你必须掌握命令行的使用。如果你打算使用 Windows ，请查阅其他文章。） 拥有一台 Linux 服务器 （可以购买 VPS 也可以使用 虚拟机 本文章以 VPS 为例，并购置了域名 （域名非必须） ） 拥有一个静态网站的源码 （如果仅仅作为学习目的，你可以写一个简单的 HTML 文件，这里以使用 hexo 生成的静态网站为例。） 知道 Nginx 是什么，有什么用 （不需要掌握 Nginx）  不同 Linux 发行版下命令会有所区别，本文章以 Ubuntu20.04 为例
准备服务器 如果你已经有了一台服务器并安装好了 Nginx ，你可以直接跳过这一部分，但是如果你的服务器是新的，没有经过任何配置，请参阅以下内容进行配置。
升级系统 sudo apt update &amp;amp;&amp;amp; sudo apt upgrade 安装 Nginx sudo apt install nginx 启动 Nginx sudo systemctl start nginx # 开机自动启动 sudo systemctl enable nginx 测试服务 直接在浏览器访问你服务器的 ip，如果你部署了 DNS 服务的话，你也可以直接使用域名。如果哦看到 Nginx 的欢迎界面，服务器准备成功！</description>
    </item>
    
    <item>
      <title>写给小白的 win10 使用技巧</title>
      <link>https://aimerneige.com/zh/post/others/tips-using-windows10/</link>
      <pubDate>Wed, 26 Aug 2020 22:46:52 +0800</pubDate>
      
      <guid>https://aimerneige.com/zh/post/others/tips-using-windows10/</guid>
      <description>本文章项目地址 https://github.com/AimerNeige/Tutorial.git
 计算机使用技巧 如果你是一个几乎没有接触过电脑但是却打算入门计算机专业，这篇文章将为你介绍一些基本的计算机使用技巧。
主要介绍 Windows10 的一些使用技巧，如果你是 mac 用户，请自行查阅其他文章，但是如果你是 Linux 用户，我觉得你应该不需要看我的文章。
杀毒软件 或许你会在较旧的电脑上见到诸如360 安全卫士，金山毒霸，电脑管家等杀毒软件，受其影响，你或许也会在电脑上安装这些软件，但是，对于计算机专业来说，这些软件不仅无用而且会给你的学习带来很多麻烦。请 务必 立即 删除它们。
 但是，没有杀毒软件的话，电脑中毒怎么办啊？
 如果你的电脑是刚到手的笔记本，我相信你的预装系统是 Windows10。 而 windows 本身会预装 Windows Defender ，对于一般的病毒，Windows Defender 完全可以保护你的电脑，而且如果使用习惯良好，不下载使用来源不明的文件的话，即使没有任何杀毒软件也是可以的。但是你非要有双保险才放心，一定要安装杀毒软件的话，我推荐 火绒杀毒 https://www.huorong.cn/ 。这款软件的个人版完全免费而且没用任何广告弹窗。
 删了它们我怎么清理电脑垃圾啊？
 在旧电脑上用的硬盘是机械硬盘，而机械硬盘的磁盘碎片会影响电脑系统运行速度，在旧电脑上清理垃圾确实有用且会提升电脑运行速度，但是现在的电脑用的都是固态硬盘，这些磁盘垃圾并不会影响电脑性能，不会影响系统的运行速度，最多只是占一些存储空间，如果你非要清理的话，我推荐你使用 CCleaner https://www.ccleaner.com/。
 没有软件管家我不会下载软件了怎么办？
 要养成去官网下载软件的好习惯，比如我们想要安装 QQ 就使用搜索引擎搜索 QQ 的官网，找到 QQ 的官网 http://im.qq.com/ ，然后在官网下载安装包。类是地，我们同样可以在 Visual Studio Code 的官网 https://code.visualstudio.com/ 上下载 Visual Studio Code 的安装包。如果一个软件没有官网，你也可以在一些受信任的网站上下载它，不过大部分软件都会有官网的，除非你在下载破解软件或者其他上古软件。
 没有电脑管家我如何管理系统自启动啊？
 禁用开机自启动：
启动任务管理器，点击 启动 找到想要禁用的自启项，右击，选择禁用。</description>
    </item>
    
    <item>
      <title>每天一个 Python 小知识 isinstance</title>
      <link>https://aimerneige.com/zh/post/python/daily-python-tips/</link>
      <pubDate>Fri, 29 May 2020 09:38:41 +0800</pubDate>
      
      <guid>https://aimerneige.com/zh/post/python/daily-python-tips/</guid>
      <description>首先来看下 w3schools 的解释：
 Example Check if the number 5 is an integer:
x = isinstance(5, int)  Definition and Usage The isinstance() function returns True if the specified object is of the specified type, otherwise False.
If the type parameter is a tuple, this function will return True if the object is one of the types in the tuple.
 Syntax isinstance(object, type)
Parameter Values    Parameter Description     object Required.</description>
    </item>
    
    <item>
      <title>Friends 🧑‍🤝‍🧑</title>
      <link>https://aimerneige.com/zh/friends/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://aimerneige.com/zh/friends/</guid>
      <description>排名不分先后，按照添加时间排序。
.friends { padding: 1em 0; border: 2px solid transparent; border-bottom: 1px dashed var(--color-contrast-low); display: flex; transition: all .5s; } .friends .friend { text-decoration: none; text-overflow: ellipsis; overflow: hidden; white-space: nowrap; } .friends .name { font-weight: bold; margin: 0.375em 0; } .friends .excerpt { font-size: 0.875em; text-overflow: ellipsis; overflow: hidden; white-space: nowrap; } .friends .avatar { width: 4em !important; height: 4em !important; margin: 0 1em 0 0 !important; z-index: 0; }  伞 一只咸鱼的学习记录    HelloWorld的小博客 这里是一个小白的博客    TangZ TangZ 的个人页面    Kenvix 党明学姐    HeoLis We need to go faster and deeper.</description>
    </item>
    
    <item>
      <title>关于我 👨‍💻</title>
      <link>https://aimerneige.com/zh/about/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://aimerneige.com/zh/about/</guid>
      <description> 中北大学学生，学习物联网专业。Linux 用户，热爱开源和分享。
 技能  使用的编程语言，软件和服务
  golang python JavaScript Linux git mysql  工具  neovim VSCode VirtualBox Dbeaver Inkdrop Spotify  语言  中文 英语  教育  中北大学 宁武县高级中学 宁武一中  联系我 GitHub: https://github.com/AimerNeige/
邮件: aimer.neige@aimerneige.com
电报: @AimerNeige
域名: aimerneige.com
我的故乡 </description>
    </item>
    
    
    
    <item>
      <title>项目 💻</title>
      <link>https://aimerneige.com/zh/projects/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://aimerneige.com/zh/projects/</guid>
      <description>projects</description>
    </item>
    
  </channel>
</rss>
