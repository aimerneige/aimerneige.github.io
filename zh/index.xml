<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>AimerNeige&#39;s Blog</title>
    <link>https://aimerneige.com/zh/</link>
    <description>Recent content on AimerNeige&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 17 Aug 2021 07:16:04 +0800</lastBuildDate><atom:link href="https://aimerneige.com/zh/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Hello Hugo</title>
      <link>https://aimerneige.com/zh/post/hello-hugo/</link>
      <pubDate>Tue, 17 Aug 2021 07:16:04 +0800</pubDate>
      
      <guid>https://aimerneige.com/zh/post/hello-hugo/</guid>
      <description>安装和配置 hugo</description>
    </item>
    
    <item>
      <title>使用 nodejs 快速为 Android 程序构建 API</title>
      <link>https://aimerneige.com/zh/post/build-api-with-nodejs-quickly/</link>
      <pubDate>Sat, 30 Jan 2021 20:17:30 +0800</pubDate>
      
      <guid>https://aimerneige.com/zh/post/build-api-with-nodejs-quickly/</guid>
      <description>前言 之前在学习安卓的时候，很想要给自己的软件增加一个云服务功能，但是苦于没有学过后端，于是开始在互联网上查找资料。但是遗憾的是，后端是一个很大的范围，我查找了很多后端的资料也几乎都是在讲解如何写网页，并没有专门用来给安卓写后端的教程，在广泛地学习了大量后端内容后，成功的为自己的程序开发了一个简单的 API。希望这篇文章能够帮到那些没有系统地学习过后端，但是却想要快速开发一款能用的 API 的安卓开发者。
前期准备  你要了解互联网通讯原理 你要会一些基础的 JavaScript 你要有一台服务器 你会数据库操作 最好有一个域名（非必须） 掌握基础的终端操作  环境配置 本文章中后端开发使用的开发语言为 JavaScript 配合 nodejs。数据库采用常用的 mysql。
 注： nodejs 开发常用的数据库是 mongodb，但是由于 mysql 比较常用这里就用 mysql 了，当然其他数据库也是可以的，你可以查找一下 nodejs 如何链接这些数据库，并将本文中 mysql 操作的部分替换掉就可以了。
 本地测试客户端安装 你需要在自己用来开发的电脑上安装配置如下环境：
 nodejs npm  安装 nodejs Linux 下直接使用包管理安装即可。如果包管理安装的 node 很旧，可以自行谷歌一下安装方法，这里不再赘述。
以 Ubuntu 为例，直接在终端执行如下指令：
sudo apt install nodejs 安装完成后使用 node -v 查看 node 版本来确认安装是否成功。
如果是 windows 用户就更加简单了，直接在 nodejs 官网 下载安装包运行即可。推荐使用长周期稳定版本。如果你想体验新特性，也可以考虑使用最新的版本。
安装 npm 通常情况下，安装 nodejs 时会附带安装 npm，你可以直接使用 npm -v 来查看当前系统安装的 npm 版本来检测安装情况。</description>
    </item>
    
    <item>
      <title>C 函数指针</title>
      <link>https://aimerneige.com/zh/post/c-function-point/</link>
      <pubDate>Wed, 04 Nov 2020 21:00:39 +0800</pubDate>
      
      <guid>https://aimerneige.com/zh/post/c-function-point/</guid>
      <description>函数指针在大型的 C 语言项目中十分重要，但是学校对它的介绍一带而过，国内一些介绍函数指针的文章十分粗浅甚至存在错误（这里就不点名了），因此博主写了这篇文章介绍函数指针，希望能够帮助一些 C 语言学习者。
文章部分内容翻译引用于 https://www.geeksforgeeks.org/function-pointer-in-c/
函数指针的概念 类似变量，函数也会被分配一段存储空间，这段存储空间的首地址即被称做这个函数的地址。而且函数名表示的就是这个地址。既然是地址，我们就可以定义一个指针变量来存放，这个指针变量就叫做函数指针变量，简称函数指针。
函数指针的定义 下面的语句定义了一个指向函数的指针变量 p。其中 void *表示返回值，(*p) 表示 p 是一个指针变量， (int, float) 是函数的参数列表。
void *(*p) (int, float); 这样我们就得到了一个指针变量 p，它的类型为 void * (*)(int, float)
所以函数指针的定义方法为：
函数返回类型 (*指针变量名) (函数参数列表); 这里的函数参数列表类似函数声明，只需写出变量类型即可，并不需要定义变量。
即下面的俩种写法等价并且第二种写法中定义的变量并没有任何意义，建议使用第一种写法，不要使用第二种写法。
void *(*p) (int, float); void *(*p) (int a, float b); 如何对函数指针赋值 int Func(int x); // 函数的声明  int (*p) (int x); // 函数指针的定义  p = &amp;amp;Func; // 函数指针的赋值 p = Func; // 另一种可行的写法 注：对于俩种赋值写法的详细说明见对函数赋值和调用的一些说明</description>
    </item>
    
    <item>
      <title>About Me</title>
      <link>https://aimerneige.com/zh/about/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://aimerneige.com/zh/about/</guid>
      <description>关于我</description>
    </item>
    
    
    <item>
      <title>Friends</title>
      <link>https://aimerneige.com/zh/friends/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://aimerneige.com/zh/friends/</guid>
      <description>装修中&amp;hellip;
各位大佬一定看了 yaml 就可以自动脑补一份完美的 html 吧。。。
- { title: &amp;#39;伞&amp;#39;, intro: &amp;#39;一只咸鱼的学习记录&amp;#39;, link: &amp;#39;https://farewell12345.github.io/&amp;#39;, github: &amp;#39;https://github.com/farewell12345&amp;#39;, image: &amp;#39;https://avatars.githubusercontent.com/u/53655863?v=4&amp;#39; } - { title: &amp;#39;HelloWorld的小博客&amp;#39;, intro: &amp;#39;这里是一个小白的博客&amp;#39;, link: &amp;#39;https://mzdluo123.github.io/&amp;#39;, github: &amp;#39;https://github.com/mzdluo123&amp;#39;, image: &amp;#39;https://avatars.githubusercontent.com/u/23146087?v=4&amp;#39; } - { title: &amp;#39;TangZ&amp;#39;, intro: &amp;#39;TangZ 的个人页面&amp;#39;, link: &amp;#39;https://wstzj.github.io/&amp;#39;, github: &amp;#39;https://github.com/wstzj&amp;#39;, image: &amp;#39;https://avatars.githubusercontent.com/u/55931768?v=4&amp;#39; } - { title: &amp;#39;Kenvix&amp;#39;, intro: &amp;#39;党明学姐&amp;#39;, link: &amp;#39;https://kenvix.com/&amp;#39;, github: &amp;#39;https://github.com/kenvix&amp;#39;, image: &amp;#39;https://avatars.githubusercontent.com/u/4546175?v=4&amp;#39; } - { title: &amp;#39;HeoLis&amp;#39;, intro: &amp;#39;We need to go faster and deeper.</description>
    </item>
    
    
  </channel>
</rss>
