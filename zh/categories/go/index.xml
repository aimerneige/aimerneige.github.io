<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Go on Aimer&#39;s Blog</title>
    <link>https://aimerneige.com/zh/categories/go/</link>
    <description>Recent content in Go on Aimer&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 26 Feb 2023 12:48:36 +0800</lastBuildDate><atom:link href="https://aimerneige.com/zh/categories/go/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>如何给 Go 的结构体添加多个 tag</title>
      <link>https://aimerneige.com/zh/post/go/how-to-add-multiple-tags-to-go-struct/</link>
      <pubDate>Sun, 26 Feb 2023 12:48:36 +0800</pubDate>
      
      <guid>https://aimerneige.com/zh/post/go/how-to-add-multiple-tags-to-go-struct/</guid>
      <description> 本来很简单的东西，但是老忘，干脆写个博客吧
 错误写法 type Page struct {  PageId string `bson:&amp;#34;pageId&amp;#34;,json:&amp;#34;pageId&amp;#34;`  Meta map[string]interface{} `bson:&amp;#34;meta&amp;#34;,json:&amp;#34;pageId&amp;#34;` } 正确写法 type Page struct {  PageId string `bson:&amp;#34;pageId&amp;#34; json:&amp;#34;pageId&amp;#34;`  Meta map[string]interface{} `bson:&amp;#34;meta&amp;#34; json:&amp;#34;pageId&amp;#34;` } 很多 Tag Items []Item `gorm:&amp;#34;column:items,type:varchar(255);comment:&amp;#39;sample column&amp;#39;&amp;#34; json:&amp;#34;items&amp;#34;` 参考链接  StackOverflow - How to define multiple name tags in a struct  </description>
    </item>
    
    <item>
      <title>Golang Context</title>
      <link>https://aimerneige.com/zh/post/go/go-context/</link>
      <pubDate>Fri, 03 Feb 2023 23:29:21 +0800</pubDate>
      
      <guid>https://aimerneige.com/zh/post/go/go-context/</guid>
      <description>前言 有时我们要通过第三方服务获取数据，它可以是外部提供的 API，也可以是微服务的接口等等，总之，它们有相同的问题：“获取数据可能需要大量时间”。如果在代码中同步地获取这些数据，程序就会花时间等待这些服务响应，而这些等待会严重影响程序的运行效率，而且一旦这些服务崩溃，我们的程序就会陷入无休止的等待中，那么如何解决这个问题呢？可以使用 Go 的 context 包。
问题 我们用这个函数来替代那些第三方服务。我们直接使用 time.Sleep() 函数来模拟一个耗时过程，在现实场景中，它可能是在执行一个非常复杂的 SQL 查询，也可以是调用一个人工智能服务接口。当然，这个耗时是不确定的，甚至有可能是无穷大（卡死）。
func fetchThirdPartyStuffWhichCanBeSlow() (int, error) { 	time.Sleep(time.Millisecond * 500)  	return 64, nil } 如果我们不做任何处理，直接调用这个函数，就像这样：
func foo() { 	// some code here ...  	val, err := fetchThirdPartyStuffWhichCanBeSlow() 	if err != nil { 	log.Fatal(err) 	}  	// some code here ... } 上面的代码如果用在一些只执行一次的脚本、工具中，并不会带来严重后果，无非多等一下就好了，即使有问题也可以关掉程序检查一下第三方服务。但是如果上面的代码用在一个承载大流量的 web 服务中，程序在执行完耗时代码后还要继续执行一些重要的业务功能，那么这样直接调用而不加考虑的代码很可能是致命的。一旦第三方服务出现问题，程序没有任何机制检查和处理，而是直接陷入无休止的等待。这显然是不合理的。
解决方案 要解决上述的问题，比较常见的思路是引入一个主动停止耗时服务的功能，这样如果耗时函数花了太多时间执行，程序就可以感知到，并主动干预。
在后文中，我们假设我们要使用用户的 ID 访问用户的数据，且调用三方服务的代码被单独封装为 fetchUserData()。</description>
    </item>
    
    <item>
      <title>Golang embed</title>
      <link>https://aimerneige.com/zh/post/go/go-embed/</link>
      <pubDate>Sat, 13 Aug 2022 23:57:11 +0800</pubDate>
      
      <guid>https://aimerneige.com/zh/post/go/go-embed/</guid>
      <description>前言 在写项目的时候，有时候不可避免地要处理静态文件，如果将源码直接作为软件提供问题不大，使用相对路径读取这些静态文件就可以了。但是如果项目作为库向外公布显然不可行，使用相对路径是读取不到文件的，而使用绝对路径却会带来更大的问题：因为不同的人使用，路径绝对不可能完全一致的。如果要求用户在指定路径下放置这些依赖的静态文件，虽然可行但是会给用户带来很大的困扰，而且这样的实现方式显然不够优雅。这时候，将这些静态文件一起打包进可执行文件似乎是一个完美的解决方案，那么如何实现呢？最简单的方法是硬编码，将静态文件以文本或字节数组的形式直接编入源代码，go 也有一些库帮你自动生成代码，比如 go-bindata。很明显，这个库已经终止维护了，这是因为在 go 1.16 版本，官方发布了 embed 完美地解决了这个问题。本文简要介绍 embed 的一些基础用法。
embed 假设我们有一个文件 hello.txt
Hello World! Hello go embed! 我们要写一个程序读取其中的内容并输出到终端：
// file: main.go package main  import ( 	&amp;#34;fmt&amp;#34; 	&amp;#34;os&amp;#34; )  func main() { 	s, err := os.ReadFile(&amp;#34;./hello.txt&amp;#34;) 	if err != nil { 	panic(err) 	} 	fmt.Println(string(s)) } 很简单，不是吗？
➜ tree . . ├── go.mod ├── hello.txt └── main.go  0 directories, 3 files  ➜ go build main.</description>
    </item>
    
    <item>
      <title>Go 图像处理基础</title>
      <link>https://aimerneige.com/zh/post/go/go-image-processing-basic/</link>
      <pubDate>Fri, 12 Aug 2022 22:40:28 +0800</pubDate>
      
      <guid>https://aimerneige.com/zh/post/go/go-image-processing-basic/</guid>
      <description>前言 Go 语言的官方包 image 和 image/color 定义了非常多的类型，涵盖了很多的图像处理基础内容，本文简单介绍这些库中的基本概念和使用方法。
常见类型介绍 Colors Colors 是一个接口，它的代码如下：
type Color interface { 	// RGBA returns the alpha-premultiplied red, green, blue and alpha values 	// for the color. Each value ranges within [0, 0xffff], but is represented 	// by a uint32 so that multiplying by a blend factor up to 0xffff will not 	// overflow. 	// 	// An alpha-premultiplied color component c has been scaled by alpha (a), 	// so has valid values 0 &amp;lt;= c &amp;lt;= a.</description>
    </item>
    
    <item>
      <title>配置 go 开发环境</title>
      <link>https://aimerneige.com/zh/post/go/go-env-setup-for-beginner/</link>
      <pubDate>Tue, 24 Aug 2021 21:31:05 +0800</pubDate>
      
      <guid>https://aimerneige.com/zh/post/go/go-env-setup-for-beginner/</guid>
      <description>本篇文章简要介绍如何配置 go 的开发环境</description>
    </item>
    
  </channel>
</rss>
