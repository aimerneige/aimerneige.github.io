[{"content":"Before Start It’s been a long time since I wrote a blog post last time. That\u0026rsquo;s because I often reinstall my system on computer, and every time I install and configure the blog of hexo on my computer is a troublesome thing. But recently, I discovered hugo, a simple and easy-to-use blog system, which can keep me away from hexo, which is slow and troublesome to configure and install. It has a great experience to use and I happened to change a blog theme, so I decided to use hugo to build my new blog. This article briefly introduces how to install and use hugo.\nInstall You may need  golang git text editor you love  You must needn\u0026rsquo;t  nodejs npm  Install hugo Install hugo is very simple. Take fedora system as an example, simply run this command:\nsudo dnf install hugo Create Site Directory Create your site directory with this command:\nhugo new site blog Change to work directory:\ncd blog Use git for version control:\ngit init Install Theme Pick up your favorite theme, clone it into ./themes directory directly.\ngit clone https://github.com/adityatelange/hugo-PaperMod themes/PaperMod --depth=1  Use --depth=1 to ignore the commit history.\n Of course, you can download a zip file and unzip it.\nIf you wants to make version control more convenient and update more easily, use this command to add submodule:\ngit submodule add https://github.com/adityatelange/hugo-PaperMod.git themes/PaperMod --depth=1 Clone submodules when reclone repo:\ngit submodule update --init --recursive Update theme:\ngit submodule update --remote --merge Config hugo support many config file format. The yaml file is more readable, so in the next article we will use yaml.\nDifferent from hexo, you have only one config file, just follow you theme\u0026rsquo;s doc and edit config file.\nApply Theme theme: \u0026#34;PaperMod\u0026#34; Edit Theme Config Different thems has different way to config, please follow your theme\u0026rsquo;s doc.\nFollow config for reference:\nbaseURL: \u0026#34;https://aimerneige.com/\u0026#34; languageCode: \u0026#34;en-us\u0026#34; title: \u0026#34;AimerNeige\u0026#39;s Blog\u0026#34; theme: \u0026#34;PaperMod\u0026#34; enableRobotsTXT: true buildDrafts: false buildFuture: false buildExpired: false defaultContentLanguage: en defaultContentLanguageInSubdir: true languages: en: languageName: \u0026#34;English\u0026#34; weight: 1 menu: main: - name: About url: about/ weight: 5 - name: Friends url: friends/ weight: 6 - name: Post url: post/ weight: 7 - name: Archive url: archives/ weight: 8 - name: Tags url: tags/ weight: 9 - name: Categories url: categories/ weight: 10 - name: Search url: search/ weight: 11 zh: languageName: \u0026#34;中文\u0026#34; weight: 2 menu: main: - name: 关于 url: about/ weight: 5 - name: 朋友 url: friends/ weight: 6 - name: 文章 url: post/ weight: 7 - name: 归档 url: archives/ weight: 8 - name: 标签 url: tags/ weight: 9 - name: 分类 url: categories/ weight: 10 - name: 搜索 url: search/ weight: 11 params: profileMode: enabled: true title: \u0026#34;Aimer Neige\u0026#34; subtitle: \u0026#34;技术宅拯救世界\u0026#34; imageUrl: \u0026#34;https://avatars.githubusercontent.com/u/51701792?v=4\u0026#34; imageTitle: \u0026#34;avatar.jpeg\u0026#34; imageWidth: 140 imageHeight: 140 params: env: production keywords: [Blog, OpenSource, Coding, Golang, Programming] author: \u0026#34;Aimer Neige\u0026#34; defaultTheme: auto disableThemeToggle: false ShowToc: true TocOpen: false ShowBreadCrumbs: true ShowReadingTime: false ShowPostNavLinks: true ShowShareButtons: false ShowCodeCopyButtons: true displayFullLangName: true editPost: URL: \u0026#34;https://github.com/aimerneige/blog/content\u0026#34; Text: \u0026#34;Suggest Changes\u0026#34; appendFilePath: true homeInfoParams: Title: \u0026#34;Aimer Neige\u0026#34; Content: \u0026#34;Tech Otakus Save The World\u0026#34; profileMode: enabled: true title: \u0026#34;Aimer Neige\u0026#34; subtitle: \u0026#34;Tech Otakus Save The World\u0026#34; imageUrl: \u0026#34;https://avatars.githubusercontent.com/u/51701792?v=4\u0026#34; imageTitle: \u0026#34;avatar.jpeg\u0026#34; imageWidth: 140 imageHeight: 140 socialIcons: - name: github url: \u0026#34;https://github.com/AimerNeige\u0026#34; - name: twitter url: \u0026#34;https://twitter.com/NeigeAimer\u0026#34; - name: steam url: \u0026#34;https://steamcommunity.com/id/AimerNeige\u0026#34; - name: Telegram url: \u0026#34;https://t.me/AimerNeige\u0026#34; - name: KoFi url: \u0026#34;https://ko-fi.com/aimerneige\u0026#34; - name: RsS url: \u0026#34;index.xml\u0026#34; taxonomies: category: categories tag: tags series: series outputs: home: - HTML - RSS - JSON Migrate Copy your markdown file to new site directory and edit config.\nTest Use this command to run a local test server:\nhugo serve -D Deploy Generate static file with this command:\nhugo Then public it to github:\ncd public git add -A git commit -m \u0026#34;commit message\u0026#34; git push ","permalink":"https://aimerneige.com/en/post/hello-hugo/","summary":"Before Start It’s been a long time since I wrote a blog post last time. That\u0026rsquo;s because I often reinstall my system on computer, and every time I install and configure the blog of hexo on my computer is a troublesome thing. But recently, I discovered hugo, a simple and easy-to-use blog system, which can keep me away from hexo, which is slow and troublesome to configure and install. It has a great experience to use and I happened to change a blog theme, so I decided to use hugo to build my new blog.","title":"Hello Hugo"},{"content":"After upgrade my ubuntu 20.04, I find the system ui resolution is small and looks ugly. I search google for this which tell me to reinstall my Graphics Card Driver. But it doesn\u0026rsquo;t work, so I have to try it myself. And here are my solutions:\n Open the settings. Select the Displays. Change the scale bigger. Select revert. All done.  After the system reboot, this problem will appear again. But it really works.\n  This problem solved after a upgrade.\n ","permalink":"https://aimerneige.com/en/post/ubuntu-20.04-resolution-error-fix/","summary":"After upgrade my ubuntu 20.04, I find the system ui resolution is small and looks ugly. I search google for this which tell me to reinstall my Graphics Card Driver. But it doesn\u0026rsquo;t work, so I have to try it myself. And here are my solutions:\n Open the settings. Select the Displays. Change the scale bigger. Select revert. All done.  After the system reboot, this problem will appear again.","title":"Ubuntu 20.04 Resolution Error Fix"},{"content":" https://leetcode.com/problems/pyramid-transition-matrix/\n  We are stacking blocks to form a pyramid. Each block has a color which is a one letter string.\nWe are allowed to place any color block C on top of two adjacent blocks of colors A and B, if and only if ABC is an allowed triple.\nWe start with a bottom row of bottom, represented as a single string. We also start with a list of allowed triples allowed. Each allowed triple is represented as a string of length 3.\nReturn true if we can build the pyramid all the way to the top, otherwise false.\nExample 1:\nInput: bottom = \u0026quot;BCD\u0026quot;, allowed = [\u0026quot;BCG\u0026quot;, \u0026quot;CDE\u0026quot;, \u0026quot;GEA\u0026quot;, \u0026quot;FFF\u0026quot;] Output: true Explanation: We can stack the pyramid like this: A / \\ G E / \\ / \\ B C D We are allowed to place G on top of B and C because BCG is an allowed triple. Similarly, we can place E on top of C and D, then A on top of G and E. Example 2:\nInput: bottom = \u0026quot;AABA\u0026quot;, allowed = [\u0026quot;AAA\u0026quot;, \u0026quot;AAB\u0026quot;, \u0026quot;ABA\u0026quot;, \u0026quot;ABB\u0026quot;, \u0026quot;BAC\u0026quot;]: Output: false Explanation: We can't stack the pyramid to the top. Note that there could be allowed triples (A, B, C) and (A, B, D) with C != D.... Constraints:\n bottom will be a string with length in range [2, 8]. allowed will have length in range [0, 200]. Letters in all strings will be chosen from the set {'A', 'B', 'C', 'D', 'E', 'F', 'G'}.   class Solution { Map\u0026lt;String, List\u0026lt;String\u0026gt;\u0026gt; map; public boolean pyramidTransition(String bottom, List\u0026lt;String\u0026gt; allowed) { map = new HashMap\u0026lt;\u0026gt;(); for(String s : allowed) { String key = s.substring(0, 2); String value = s.substring(2, 3); map.putIfAbsent(key, new ArrayList\u0026lt;\u0026gt;()); map.get(key).add(value); } return solve(bottom); } private boolean solve(String bottom) { if(bottom.length() == 1) { return true; } List\u0026lt;String\u0026gt; nextBottoms = new ArrayList\u0026lt;\u0026gt;(); generateNextBottoms(bottom, nextBottoms, \u0026#34;\u0026#34;, 0); for(String next : nextBottoms) { if(solve(next)) { return true; } } return false; } private void generateNextBottoms(String bottom, List\u0026lt;String\u0026gt; res, String cur, int i) { if(cur.length() == bottom.length() - 1) { res.add(cur); return; } String key = bottom.substring(i, i + 2); if(!map.containsKey(key)) { return; } List\u0026lt;String\u0026gt; values = map.get(key); for(String c : values) { generateNextBottoms(bottom, res, cur + c, i + 1); } } } ","permalink":"https://aimerneige.com/en/post/leetcode-pyramid-transition-matrix/","summary":"https://leetcode.com/problems/pyramid-transition-matrix/\n  We are stacking blocks to form a pyramid. Each block has a color which is a one letter string.\nWe are allowed to place any color block C on top of two adjacent blocks of colors A and B, if and only if ABC is an allowed triple.\nWe start with a bottom row of bottom, represented as a single string. We also start with a list of allowed triples allowed.","title":"LeetCode Pyramid Transition Matrix"},{"content":" In this example, I am using Material Design. But you can also use the Theme.AppCompat.DayNight.\nThis is a simple way to adapt a dark mode, if you wants more, check for GitHub or Internet.\n Change the style First you should use the DayNight style by Google.\n\u0026lt;style name=\u0026#34;AppTheme\u0026#34; parent=\u0026#34;Theme.MaterialComponents.DayNight\u0026#34;\u0026gt; If you want to let things easily, that\u0026rsquo;s enough. But you can also provide more adaptation.\nAdapt colors Make a new folder at project/app/src/main/res/values-night then make a new resource file colors.xml. Edit the color you want to set on dark mode.\nFor example, you want to let the color of colorPrimary black on dark mode which is green on default.\nOn your values/colors.xml, you have this lien to mak the colorPrimary green.\n\u0026lt;!-- on file values/colors.xml --\u0026gt; \u0026lt;color name=\u0026#34;colorPrimary\u0026#34;\u0026gt;#3DDC84\u0026lt;/color\u0026gt; You just add a new line on values-night/colors.xml like this.\n\u0026lt;!-- on file values-night/colors.xml --\u0026gt; \u0026lt;color name=\u0026#34;colorPrimary\u0026#34;\u0026gt;#000000\u0026lt;/color\u0026gt; Then the AndroidStudio will understand what you have done and usr the #000000 when on night mode and use #3DDC84 on default.\nBut if you have these color resource on values/colors.xml which is not used for theme, just let them in, you need to add them to values-night/colors.xml.\n\u0026lt;!-- Common --\u0026gt; \u0026lt;color name=\u0026#34;white\u0026#34;\u0026gt;#FFFFFF\u0026lt;/color\u0026gt; \u0026lt;color name=\u0026#34;black\u0026#34;\u0026gt;#000000\u0026lt;/color\u0026gt; \u0026lt;color name=\u0026#34;red\u0026#34;\u0026gt;#FF0000\u0026lt;/color\u0026gt; \u0026lt;color name=\u0026#34;green\u0026#34;\u0026gt;#008000\u0026lt;/color\u0026gt; \u0026lt;color name=\u0026#34;blue\u0026#34;\u0026gt;#0000FF\u0026lt;/color\u0026gt; \u0026lt;color name=\u0026#34;yellow\u0026#34;\u0026gt;#FFFF00\u0026lt;/color\u0026gt; \u0026lt;color name=\u0026#34;teal\u0026#34;\u0026gt;#008080\u0026lt;/color\u0026gt; \u0026lt;color name=\u0026#34;Orange\u0026#34;\u0026gt;#FFA500\u0026lt;/color\u0026gt; So, If you want to change the color on night mode, just add it on values-night/colors.xml. AndroidStudio will use colors in values/colors.xml on default and use colors in values-night/colors.xml when in dark mode.\nAdapt themes Like what I write on Adapt colors, just add a themes.xml on folder project/app/src/main/res/values-night.\n","permalink":"https://aimerneige.com/en/post/dark-mode-on-android/","summary":"In this example, I am using Material Design. But you can also use the Theme.AppCompat.DayNight.\nThis is a simple way to adapt a dark mode, if you wants more, check for GitHub or Internet.\n Change the style First you should use the DayNight style by Google.\n\u0026lt;style name=\u0026#34;AppTheme\u0026#34; parent=\u0026#34;Theme.MaterialComponents.DayNight\u0026#34;\u0026gt; If you want to let things easily, that\u0026rsquo;s enough. But you can also provide more adaptation.\nAdapt colors Make a new folder at project/app/src/main/res/values-night then make a new resource file colors.","title":"Dark Mode on Android"},{"content":"Base64\nimport android.util.Base64 val charset = Charsets.UTF_8 val source_string = \u0026#34;Hello AimerNeige!\u0026#34; val b64_ret = Base64.encode(source_string.toByteArray(charset), Base64.DEFAULT).toString(charset) ","permalink":"https://aimerneige.com/en/draft/android_base64/","summary":"Base64\nimport android.util.Base64 val charset = Charsets.UTF_8 val source_string = \u0026#34;Hello AimerNeige!\u0026#34; val b64_ret = Base64.encode(source_string.toByteArray(charset), Base64.DEFAULT).toString(charset) ","title":""},{"content":"加个id ‘kotlin-android-extensions’就好了\n","permalink":"https://aimerneige.com/en/draft/android_studio/","summary":"加个id ‘kotlin-android-extensions’就好了","title":""},{"content":"Android Read Time Out ","permalink":"https://aimerneige.com/en/draft/android_studio_read_time_out/","summary":"Android Read Time Out ","title":""},{"content":"Angular 入门 安装 angular 安装 nodejs sudo apt install nodejs 安装 npm sudo apt install npm 安装 angular/cli npm install --global @angular/cli 构建一个 angular 项目 在任意目录下执行下面的指令即可新建一个 myapp 项目\nng new myapp 执行下面的指令启动这个项目\nng serve --open 启动这个项目 ","permalink":"https://aimerneige.com/en/draft/angular/","summary":"Angular 入门 安装 angular 安装 nodejs sudo apt install nodejs 安装 npm sudo apt install npm 安装 angular/cli npm install --global @angular/cli 构建一个 angular 项目 在任意目录下执行下面的指令即可新建一个 myapp 项目\nng new myapp 执行下面的指令启动这个项目\nng serve --open 启动这个项目 ","title":""},{"content":"C# C# conventions Conventions are best practices followed by programmers when writing source code. Each language can have its own set of conventions. Conventions are not strict rules; they are merely recommendations for writing good quality code. We mention a few conventions that are recognized by many C# programmers. (And often by other programmers too).\n Classes, Interfaces and Enums begin with an uppercase letter. Interface names start with an I letter. Comments are placed on a separate line, not at the end of a line of code. Method names begin with a uppercase letter. Only one statement or declaration is placed per line. Identifiers are easily readable and meaningful. Identifiers are written in PascalCase, e.g. each subsequent word begins with a capital letter. The public keyword precedes the static keyword when both are used. The parameter name of the Main method is called args. Constants are written in uppercase. Curly braces in code blocks start on a new line.  ","permalink":"https://aimerneige.com/en/draft/c#/","summary":"C# C# conventions Conventions are best practices followed by programmers when writing source code. Each language can have its own set of conventions. Conventions are not strict rules; they are merely recommendations for writing good quality code. We mention a few conventions that are recognized by many C# programmers. (And often by other programmers too).\n Classes, Interfaces and Enums begin with an uppercase letter. Interface names start with an I letter.","title":""},{"content":"# and ## Operators in C  https://www.geeksforgeeks.org/and-operators-in-c/\n ","permalink":"https://aimerneige.com/en/draft/c_sharp_operator/","summary":"# and ## Operators in C  https://www.geeksforgeeks.org/and-operators-in-c/\n ","title":""},{"content":"","permalink":"https://aimerneige.com/en/draft/c_thread_function/","summary":"","title":""},{"content":"C Upgrade C assert https://www.tutorialspoint.com/c_standard_library/c_macro_assert.htm\n#include \u0026lt;assert.h\u0026gt;#include \u0026lt;stdio.h\u0026gt; int main() { int a; char str[50]; printf(\u0026#34;Enter an integer value: \u0026#34;); scanf(\u0026#34;%d\u0026#34;, \u0026amp;a); assert(a \u0026gt;= 10); printf(\u0026#34;Integer entered is %d\\n\u0026#34;, a); printf(\u0026#34;Enter string: \u0026#34;); scanf(\u0026#34;%s\u0026#34;, str); assert(str != NULL); printf(\u0026#34;String entered is: %s\\n\u0026#34;, str); return (0); } ","permalink":"https://aimerneige.com/en/draft/c_upgrade/","summary":"C Upgrade C assert https://www.tutorialspoint.com/c_standard_library/c_macro_assert.htm\n#include \u0026lt;assert.h\u0026gt;#include \u0026lt;stdio.h\u0026gt; int main() { int a; char str[50]; printf(\u0026#34;Enter an integer value: \u0026#34;); scanf(\u0026#34;%d\u0026#34;, \u0026amp;a); assert(a \u0026gt;= 10); printf(\u0026#34;Integer entered is %d\\n\u0026#34;, a); printf(\u0026#34;Enter string: \u0026#34;); scanf(\u0026#34;%s\u0026#34;, str); assert(str != NULL); printf(\u0026#34;String entered is: %s\\n\u0026#34;, str); return (0); } ","title":""},{"content":"修复 Windows 上无法连接 google.com 的问题 平时在用 Ubuntu ，使用chrome连接谷歌服务没有问题，但是切换到 win10 下就发现了一个严重的问题，我可以正常访问 google.com.hk 却不能访问 google.com 。\n这个问题是垃圾运营商导致的，运营商的 DNS 污染导致无法正确解析 google.com。\n可以通过手动设置 DNS 或者修改 hosts 文件来解决这个问题。\n使用 8.8.8.0 和 8.8.4.4 即可。\n","permalink":"https://aimerneige.com/en/draft/connect_google_com_on_windows/","summary":"修复 Windows 上无法连接 google.com 的问题 平时在用 Ubuntu ，使用chrome连接谷歌服务没有问题，但是切换到 win10 下就发现了一个严重的问题，我可以正常访问 google.com.hk 却不能访问 google.com 。\n这个问题是垃圾运营商导致的，运营商的 DNS 污染导致无法正确解析 google.com。\n可以通过手动设置 DNS 或者修改 hosts 文件来解决这个问题。\n使用 8.8.8.0 和 8.8.4.4 即可。","title":""},{"content":"","permalink":"https://aimerneige.com/en/draft/datastruct_binarytree/","summary":"","title":""},{"content":"Docker 入门 什么是 docker 安装 基础指令 常用操作 ","permalink":"https://aimerneige.com/en/draft/docker/","summary":"Docker 入门 什么是 docker 安装 基础指令 常用操作 ","title":""},{"content":"Git \u0026amp; GitHub 入门教程 之前阅读过很多 git 和 GitHub 的文章或资料，这些文章或资料有的写的十分简陋、内容过少，还有的难以上手，不适合新手阅读，当然，也有一些十分优秀的作品（后附）但是我还是想以自己的方式来写一篇通俗易懂而且涵盖常用指令教程。\n记得之前看过一篇文章，《关于计算机科学的 50 个误解》，这篇文章中提到这样一个误解：\n git 和 GitHub 是同义词。\n 虽然这篇文章把 git 和 GitHub 放在了一起，但是它们并不是一个东西，而且差别很大，接下来我会分别介绍它们。\nGit _____ \u0026lt; Git \u0026gt; ----- \\  ^__^ \\  (oo)\\_______ (__)\\  )\\/\\  ||----w | || || Git 是什么 如果你去查资料，你会发现 Git 是一个 分布式版本控制软件 光看这个定义我想你并不能理解到底什么是 git ，不过不用担心，接下来我会让你理解它。\n先把这个奇怪的定义放一边吧，我们设想这样一种情境：\n假如你正在开发一个项目，在开发过程中，你发现单纯的更新日志已经不能满足你的需求，你想不仅想要记录每一次更新中更改的内容，而且希望可以在未来随时查看之前的代码。你会怎么做呢？\n最简单的方法就是直接将整个项目文件夹复制一份，并且将文件夹进行规范化的命名。比如我们可以在修改完成后将整个项目复制到名为“修改日期-修改人-修改内容”的文件夹中，以后需要的话可以直接打开旧版本的文件夹，将文件复制出一份进行修改。\n就像这样：\n├── 2020-01-12-AimerNeige_first_update │ └── ... ├── 2020-01-19-AimerNeige_fix_something │ └── ... ├── 2020-01-21-AimerNeige_make_ui_look_better │ └── ... ├── 2020-01-29-Farewell_encrypt_data │ └── ... ├── 2020-02-12-AimerNeige_fix_bugs │ └── ... └── current_project └── ... 但是这样会有很多问题\n 你的文件目录会很乱 大量重复文件，浪费电脑存储空间 难以进行多人协作  而 git 就是用来解决这些问题的。它可以进行版本控制，记录你的修改内容，可以随时回退版本，并且有良好的多人协作支持。\n那么什么是分布式呢？相对与分布式的，是集中式。对比起来更容易理解，先说集中式版本控制系统：\n集中式版本控制系统的版本库是集中存放在中央服务器的，也就是整个项目的所有文件都不是保存在你的电脑上，而是保存在服务器上，而我们需要进行开发的时候，我们不可能使用服务器来开发，我们都是使用自己的电脑，所以我们必须先从服务器下载到最新的版本，然后进行修改，修改完后，再把自己的修改推送给中央服务器。中央服务器就好比是一个图书馆，你要改一本书，必须先从图书馆借出来，然后回到家自己改，改完了，再放回图书馆。\n看起来很不错，但是仔细想想就会发现一个很严重的问题：如果没有网络，就无法获取最新的版本，也就没有办法进行开发，即使获取到了最新的版本，没有网络也无法将本地的修改推送到服务器上，也就是说，离开网络，完全没有办法进行工作。如果是局域网还可以接受，毕竟局域网带宽够大，速度够快，但是如果在互联网上，遇到网速慢的话，可能需要消耗大量的时间在文件传输上，十分浪费时间\n那什么是分布式呢？首先，分布式版本控制系统没有“中央服务器”的概念，每个人的电脑上都是一个完整的版本库，也就是拥有完整的历史记录，这样，在工作的时候，就不需要联网了，因为版本库就在自己的电脑上。那么如何解决协作问题呢？实际上很简单，比如你修改了 A 文件，你的同事也修改了 A 文件，你们只需要将修改的内容推送给对方就可以了。\n和集中式版本控制系统，分布式版本控制系统的安全性更高，因为每个人电脑里都有完整的版本库，如果一个人的电脑坏了，没关系，只需要重别人那里复制一个就可以了。但是集中式版本控制系统的中央服务器一旦出了问题，所有人都没有办法工作了。\n在实际使用分布式版本控制系统的时候，其实很少在两人之间的电脑上推送版本库的修改，因为可能你们俩不在一个局域网内，两台电脑互相访问不了，也可能今天你的同事病了，他的电脑压根没有开机。因此，分布式版本控制系统通常也有一台充当“中央服务器”的电脑，但这个服务器的作用仅仅是用来方便“交换”大家的修改，相当与一个共享网盘，没有它大家也一样可以进行工作，只是交换修改不方便而已。\n我相信你已经对 git 有一个基本的认识了，你应该了解 git 是用来干什么的，它是用来记录你的修改记录并帮助团队进行协作开发的一个工具。随着对 git 的指令的学习，你将会进一步的了解 git。\n接下来，我会介绍常用的 git 指令。\ngit 的安装 前面说到 git 是一个软件，那么首先，我们应该安装它。\n最早 git 是在 Linux 上开发的，很长一段时间内，git 也只能在 Linux 和 Unix 系统上跑。不过，慢慢地有人把它移植到了 Windows 上。现在，git 可以在 Linux、Unix、Mac 和 Windows 这几大平台上正常运行了。\n在 Linux 上安装 git 有一些发行版会自带 git，并不需要安装，你可以通过在终端执行 git 指令来查看当前系统是否安装了 git，如果没有，可以按照下面的说明安装它：\n如果你正在使用 Debian 系操作系统，可以使用如下命令安装：\nsudo apt install git 类似地，在其他发行版也可以直接通过包管理器直接安装，这里不多赘述。\n当然，如果愿意，你也可以在官网下载 git 的源代码自己编译。\n在 Windows 上安装 git 首先访问 git 的官网： https://git-scm.com/\n在官网按照自己的需求下载 32 位或 64 位的安装包（不会还有人在用 32 位系统了吧），不用纠结版本，直接下载最新版即可（由于某些玄学问题，下载可能会很慢，这个自己解决吧），下载完成后会得到一个 exe 文件，直接运行它，赋予管理员权限之后，git 会要求你按照自己的喜好修改一系列的配置，如果你想要修改它们，你可以按照提示修改，但是如果你是第一次安装 git，不清楚这些配置的含义，也不在乎这些设置，你可以按照 git 推荐的默认设置，直接狂点下一步就可以了，安装完成后，在桌面或任意文件夹下单击右键，你应该可以看到 Git Bash Here 这个选项，这时候，git 安装就完成了。\n在 Mac OS X 上安装 git 如果你愿意的话，可以先安装 homebrew，然后使用 homebrew 安装 git，具体安装方法自行查阅 homebrew 的文档，这里不多介绍了。\n如果你嫌麻烦也可以在 AppStore 装一个 XCode，XCode 会集成安装 git，非常方便。\ngit 的初始化配置 在使用 git 前，需要对 git 进行初始化配置，你要向 git 提供一个用户名和电子邮箱地址作为你的个人信息，毕竟 git 是为了多人协作而诞生的，在修改记录中要记录修改人的信息。没有你的个人信息，git 会因为无法进行记录而拒绝工作。\n在任意目录下启动 git bash（你也可以使用 powershell 或你喜欢的终端模拟器）\n输入如下指令来配置你的用户名和邮箱地址：\ngit config --global user.name \u0026#34;AimerNeige\u0026#34; git config --global user.email \u0026#34;aimer.neige.soft@gmail.com\u0026#34; 这里是我的用户名和邮箱，注意替换内容。\n这里的用户名和邮箱你可以随意设置，它会被用来保存在 git 历史中，并不需要和其他社区（如 GitHub）相同。\ngit 指令 安装并进行了必要的配置后，就可以开始使用 git 了。\n或许你知道一些图形化的软件可以通过鼠标操作界面来执行各种 git 操作，但是，我还是建议使用终端指令，因为这些软件有很多，不同的软件会有不同的操作方法，不可能都讲到，而且这些软件实际上都是在执行终端指令，而 git 本身是一个命令行软件，它没有提供 gui，这些软件只是辅助作用，所以接下来对 git 的学习都是在终端下进行的。\n由于 git 是一个命令行软件，你需要在终端输入指令在可以使用 git，在 Linux 下，你可以随意选择自己喜欢的终端模拟器，在 Windows 下，你可以直接使用 git bash 作为终端，如果你觉得它太丑的话，你也可以使用 powershell 或其他终端模拟器。\n在进行接下来的操作之前，新建一个文件夹用来存放你的学习项目，在当前的文件夹下开启终端，即可执行 git 指令。接下来的演示会使用一个空仓库来进行演示。\n在 Windows 下，你可以直接右键新建一个文件夹，然后在这个文件夹内开启终端即可。（在 Windows 下，你可以在你的项目文件夹右击右键，选择 Git Bash Here 来启动 git bash。）\n注意：如果你使用 Windows 系统，为了避免遇到各种莫名其妙的问题，请确保目录名（包括父目录）不包含中文。\n初始化 git 仓库 首先，第一个指令是如何初始化一个 git 仓库。\ngit init 我们可以在一个非 git 仓库的项目目录下执行 git init 来初始化一个 git 仓库。\n执行完这个指令后，这个文件夹就变成了一个 git 仓库，你会发现你的文件夹下多了一个名称为 .git 的隐藏文件夹，这个文件夹下保存的就是 git 生成的文件。你不需要在意里面有什么，你也不需要修改他们，除非你在想要研究 git 的工作原理。如果你只是想要使用 git 的话，把它交给 git 来处理就好了。如果你不想让 git 托管这个项目了，你可以删掉这个文件夹，这个目录就不再是一个 git 仓库，而是变成了一个普通的文件夹。\n初始化完成后，你就拥有了你自己的第一个 git 仓库，接下来，在这个仓库中你可以执行更多的 git 指令了。\n查看仓库状态 要查看当前仓库的状态，输入 git status 指令\ngit status 该命令会返回当前 git 仓库的状态信息。\n由于当前目录是一个空仓库，你会得到这样的输出：\n$ git status On branch master No commits yet nothing to commit (create/copy files and use \u0026#34;git add\u0026#34; to track) 接下来介绍一下这些输出的含义：\nOn branch master 当前分支为 master 分支\nNo commits yet 当前目录下没有任何提交记录\nnothing to commit 没有可以进行提交的文件\ncreate/copy files and use \u0026quot;git add\u0026quot; to track 创建或复制文件，然后使用 git add 来追踪\n这里出现了一些还没有介绍的内容，比如分支，提交等，这些将会在之后介绍，你现在只需要记住git status 这个指令即可。\n添加一个文件到暂存区 接下来向你的空项目中写入一个文件。\n你可以使用下面的命令快速创建一个空文件：\ntouch hello.c 添加一个 hello.c 文件后，使用 git status 指令， git 会提示你发现了一个未追踪的文件，文件名为 hello.c。\n$ git status On branch master No commits yet Untracked files: (use \u0026#34;git add \u0026lt;file\u0026gt;...\u0026#34; to include in what will be committed) hello.c nothing added to commit but untracked files present (use \u0026#34;git add\u0026#34; to track) Untracked files 未追踪的文件\nuse \u0026quot;git add \u0026lt;file\u0026gt;...\u0026quot; to include in what will be committed 使用 git add \u0026lt;file\u0026gt;... 来添加将要提交的内容\nnothing added to commit but untracked files present 没有添加任何待提交的内容但存在未跟踪的文件\nuse \u0026quot;git add\u0026quot; to track\n同时，git 提示你使用 \u0026quot;git add \u0026lt;file\u0026gt;...\u0026quot; 来添加这个文件到暂存区以进行提交。\n$ git status On branch master No commits yet Changes to be committed: (use \u0026#34;git rm --cached \u0026lt;file\u0026gt;...\u0026#34; to unstage) new file: hello.c $ git status On branch master nothing to commit, working tree clean  git 是一个庞大的软件，它的功能远远不止这些，感兴趣你可以查阅官方文档或者找一些介绍 git 的书籍来进一步学习 git，但是在我看来这些常用的指令已经足够基本的使用了，如果有时间的话，我会在日后更新更多的内容。\nGitHub ________ \u0026lt; GitHub \u0026gt; -------- \\  ^__^ \\  (oo)\\_______ (__)\\  )\\/\\  ||----w | || || ","permalink":"https://aimerneige.com/en/draft/git_github_basic/","summary":"Git \u0026amp; GitHub 入门教程 之前阅读过很多 git 和 GitHub 的文章或资料，这些文章或资料有的写的十分简陋、内容过少，还有的难以上手，不适合新手阅读，当然，也有一些十分优秀的作品（后附）但是我还是想以自己的方式来写一篇通俗易懂而且涵盖常用指令教程。\n记得之前看过一篇文章，《关于计算机科学的 50 个误解》，这篇文章中提到这样一个误解：\n git 和 GitHub 是同义词。\n 虽然这篇文章把 git 和 GitHub 放在了一起，但是它们并不是一个东西，而且差别很大，接下来我会分别介绍它们。\nGit _____ \u0026lt; Git \u0026gt; ----- \\  ^__^ \\  (oo)\\_______ (__)\\  )\\/\\  ||----w | || || Git 是什么 如果你去查资料，你会发现 Git 是一个 分布式版本控制软件 光看这个定义我想你并不能理解到底什么是 git ，不过不用担心，接下来我会让你理解它。\n先把这个奇怪的定义放一边吧，我们设想这样一种情境：\n假如你正在开发一个项目，在开发过程中，你发现单纯的更新日志已经不能满足你的需求，你想不仅想要记录每一次更新中更改的内容，而且希望可以在未来随时查看之前的代码。你会怎么做呢？\n最简单的方法就是直接将整个项目文件夹复制一份，并且将文件夹进行规范化的命名。比如我们可以在修改完成后将整个项目复制到名为“修改日期-修改人-修改内容”的文件夹中，以后需要的话可以直接打开旧版本的文件夹，将文件复制出一份进行修改。\n就像这样：\n├── 2020-01-12-AimerNeige_first_update │ └── ... ├── 2020-01-19-AimerNeige_fix_something │ └── ... ├── 2020-01-21-AimerNeige_make_ui_look_better │ └── .","title":""},{"content":"Graph 图 Terminology 术语 G = ( V; E )\nG 图\nV 顶点\nE 边\nvertex 顶点\nvertices 顶点集\nn = |V| 顶点的总数\nedge 边\nedges 边集\ne = |E| 边的总数\nadjacency 邻接关系\nv ~ v\n点与点的关系\nincidence 关联关系\nv ~ e\n点与边的关系\n 排除与自己的关系，即自环边。\n undirected edge 无向边\nundigraph 无向图\ndigraph 有向图\ndirected edge 有向边\nu, v 分别称为 (u, v) 的尾 (tail) 头(head)\nmixed graph 混合图\npath 路径\nsimple path 简单路径\ncycle 环路\nsimple cycle 简单环路\nDAG (Directed Acyclic Graph) 有向无环图\nEulerian tour 欧拉环路\nHamiltonian tour 哈密尔顿环路\nImplementation 实现 Algorithm 算法 ","permalink":"https://aimerneige.com/en/draft/graph/","summary":"Graph 图 Terminology 术语 G = ( V; E )\nG 图\nV 顶点\nE 边\nvertex 顶点\nvertices 顶点集\nn = |V| 顶点的总数\nedge 边\nedges 边集\ne = |E| 边的总数\nadjacency 邻接关系\nv ~ v\n点与点的关系\nincidence 关联关系\nv ~ e\n点与边的关系\n 排除与自己的关系，即自环边。\n undirected edge 无向边\nundigraph 无向图\ndigraph 有向图\ndirected edge 有向边\nu, v 分别称为 (u, v) 的尾 (tail) 头(head)\nmixed graph 混合图\npath 路径","title":""},{"content":"如何在数据库保存用户密码 ","permalink":"https://aimerneige.com/en/draft/how_to_save_password_in_password/","summary":"如何在数据库保存用户密码 ","title":""},{"content":"在 Linux 下安装中文输入法  测试环境：\n.............. aimerneige@an ..,;:ccc,. ------------- ......\u0026#39;\u0026#39;\u0026#39;;lxO. OS: Kali GNU/Linux Rolling x86_64 .....\u0026#39;\u0026#39;\u0026#39;\u0026#39;..........,:ld; Host: TM1701 .\u0026#39;;;;:::;,,.x, Kernel: 5.9.0-kali4-amd64 ..\u0026#39;\u0026#39;\u0026#39;. 0Xxoc:,. ... Uptime: 2 hours, 11 mins .... ,ONkc;,;cokOdc\u0026#39;,. Packages: 3537 (dpkg) . OMo \u0026#39;:ddo. Shell: zsh 5.8 dMc :OO; Resolution: 1920x1080, 1440x2560 0M. .:o. DE: GNOME 3.38.2 ;Wd WM: Mutter ;XO, WM Theme: Kali-Dark ,d0Odlc;,.. Theme: Kali-Dark [GTK2/3] ..\u0026#39;,;:cdOOd::,. Icons: Flat-Remix-Blue-Dark [GTK2/\u0026gt; 3] .:d;.\u0026#39;:;. Terminal: gnome-terminal \u0026#39;d, .\u0026#39; CPU: Intel i7-8550U (8) @ 4.000GHz ;l .. GPU: NVIDIA GeForce MX250 .o GPU: Intel UHD Graphics 620 c Memory: 3698MiB / 15899MiB .\u0026#39; .  安装 fcitx5 sudo apt install fcitx5 启用 fcitx5 im-config 在开启的图形化界面中启用 fcitx5\n配置 fcitx5 编辑文件 ~/.xprofile 写入如下内容：\nexport GTK_IM_MODULE=fcitx5 export QT_IM_MODULE=fcitx5 export XMODIFIERS=\u0026#34;@im=fcitx5\u0026#34; export LANG=\u0026#34;zh_CN.UTF-8\u0026#34; export LC_CTYPE=\u0026#34;zh_CN.UTF-8\u0026#34; 编辑完成后注销账户，重新启动桌面\n安装 rime sudo apt install fcitx5-rime 启用 rime 在托盘处点击配置，并添加 rime。\n如果你的系统和我一样是英文，取消勾选“Only Show Current Language”即可查看中文选项\n更快地，你可以直接在上面的搜索框搜索 Rime\n安装输入方案 安装 四叶草拼音输入方案 提供的输入方案\n具体安装方法查看 项目 wiki\n更换简体中文 按下 Ctrl + ` 将输入模式切换为简体中文\n你也可以按照自己的喜好更改全角/半角的设置\n后记 如果你在安装中遇到任何问题，请查阅 fcitx rime 四叶草拼音输入方案 提供的文档。\n或是在 Arch Wiki 上查阅相关内容。\n","permalink":"https://aimerneige.com/en/draft/linux_chinese/","summary":"在 Linux 下安装中文输入法  测试环境：\n.............. aimerneige@an ..,;:ccc,. ------------- ......\u0026#39;\u0026#39;\u0026#39;;lxO. OS: Kali GNU/Linux Rolling x86_64 .....\u0026#39;\u0026#39;\u0026#39;\u0026#39;..........,:ld; Host: TM1701 .\u0026#39;;;;:::;,,.x, Kernel: 5.9.0-kali4-amd64 ..\u0026#39;\u0026#39;\u0026#39;. 0Xxoc:,. ... Uptime: 2 hours, 11 mins .... ,ONkc;,;cokOdc\u0026#39;,. Packages: 3537 (dpkg) . OMo \u0026#39;:ddo. Shell: zsh 5.8 dMc :OO; Resolution: 1920x1080, 1440x2560 0M. .:o. DE: GNOME 3.38.2 ;Wd WM: Mutter ;XO, WM Theme: Kali-Dark ,d0Odlc;,.. Theme: Kali-Dark [GTK2/3] ..\u0026#39;,;:cdOOd::,. Icons: Flat-Remix-Blue-Dark [GTK2/\u0026gt; 3] .:d;.\u0026#39;:;. Terminal: gnome-terminal \u0026#39;d, .","title":""},{"content":"Shell 学习笔记  本文章内容整理自 菜鸟教程 RUNOOB.COM\n本文章版权均归 菜鸟教程 所有 (有删改)\nhttps://www.runoob.com/linux/linux-shell.html\n Hello World #!/bin/bash echo \u0026#34;Hello World!\u0026#34; 变量 定义变量 定义变量时，变量名不加美元符号\nyour_name=\u0026#34;AimerNeige\u0026#34; 命名规则  命名只能使用英文字母，数字和下划线，首个字符不能以数字开头。 中间不能有空格，可以使用下划线（_）。 不能使用标点符号。 不能使用 bash 里的关键字（可用 help 命令查看保留关键字）。  隐式赋值 for file in `ls /etc` 或 for file in $(ls /etc) 使用变量 使用一个定义过的变量，只要在变量名前面加美元符号即可\nyour_name=\u0026#34;AimerNeige\u0026#34; echo $your_name echo ${your_name} 变量名外面的花括号是可选的，加不加都行，加花括号是为了帮助解释器识别变量的边界，比如下面这种情况：\nfor skill in Ada Coffe Action Java; do echo \u0026#34;I am good at ${skill}Script\u0026#34; done 如果不给 skill 变量加花括号，写成 echo \u0026quot;I am good at $skillScript\u0026quot;，解释器就会把 $skillScript 当成一个变量（其值为空），代码执行结果就不是我们期望的样子了。\n推荐给所有变量加上花括号，这是个好的编程习惯。\n已定义的变量，可以被重新定义，如：\nyour_name=\u0026#34;tom\u0026#34; echo $your_name your_name=\u0026#34;AimerNeige\u0026#34; echo $your_name 这样写是合法的，但注意，第二次赋值的时候不能写 $your_name=\u0026quot;alibaba\u0026quot;，使用变量的时候才加美元符（$）。\n只读变量 使用 readonly 命令可以将变量定义为只读变量，只读变量的值不能被改变。\n下面的例子尝试更改只读变量，结果报错：\n#!/bin/bash myUrl=\u0026#34;https://www.google.com\u0026#34; readonly myUrl myUrl=\u0026#34;https://www.runoob.com\u0026#34; 运行脚本，结果如下：\n/bin/sh: NAME: This variable is read only. 删除变量 使用 unset 命令可以删除变量。语法：\nunset variable_name 变量被删除后不能再次使用。unset 命令不能删除只读变量。\n#!/bin/sh myUrl=\u0026#34;https://www.runoob.com\u0026#34; unset myUrl echo $myUrl 以上实例执行将没有任何输出。\n变量类型 运行 shell 时，会同时存在三种变量：\n 局部变量 局部变量在脚本或命令中定义，仅在当前 shell 实例中有效，其他 shell 启动的程序不能访问局部变量。 环境变量 所有的程序，包括 shell 启动的程序，都能访问环境变量，有些程序需要环境变量来保证其正常运行。必要的时候 shell 脚本也可以定义环境变量。 shell 变量 shell 变量是由 shell 程序设置的特殊变量。shell 变量中有一部分是环境变量，有一部分是局部变量，这些变量保证了 shell 的正常运行  Shell 字符串 单引号 str=\u0026#39;this is a string\u0026#39; 单引号字符串的限制：\n 单引号里的任何字符都会原样输出，单引号字符串中的变量是无效的； 单引号字串中不能出现单独一个的单引号（对单引号使用转义符后也不行），但可成对出现，作为字符串拼接使用。  双引号 your_name=\u0026#39;AimerNeige\u0026#39; str=\u0026#34;Hello, I know you are \\\u0026#34;$your_name\\\u0026#34;! \\n\u0026#34; echo -e $str 输出结果为：\nHello, I know you are \u0026#34;AimerNeige\u0026#34;! 双引号的优点：\n 双引号里可以有变量 双引号里可以出现转义字符  拼接字符串 your_name=\u0026#34;AimerNeige\u0026#34; # 使用双引号拼接 greeting=\u0026#34;hello, \u0026#34;$your_name\u0026#34; !\u0026#34; greeting_1=\u0026#34;hello, ${your_name}!\u0026#34; echo $greeting $greeting_1 # 使用单引号拼接 greeting_2=\u0026#39;hello, \u0026#39;$your_name\u0026#39; !\u0026#39; greeting_3=\u0026#39;hello, ${your_name} !\u0026#39; echo $greeting_2 $greeting_3 输出结果为：\nhello, runoob ! hello, runoob ! hello, runoob ! hello, ${your_name} ! 获取字符串长度 string=\u0026#34;abcd\u0026#34; echo ${#string} #输出 4 提取子字符串 以下实例从字符串第 2 个字符开始截取 4 个字符：\nstring=\u0026#34;runoob is a great site\u0026#34; echo ${string:1:4} # 输出 unoo 注意：第一个字符的索引值为 0。\n查找子字符串 查找字符 i 或 o 的位置(哪个字母先出现就计算哪个)：\nstring=\u0026#34;runoob is a great site\u0026#34; echo `expr index \u0026#34;$string\u0026#34; io` # 输出 4 注意： 以上脚本中 ` 是反引号，而不是单引号 \u0026lsquo;，不要看错了哦。\nShell 数组 bash 支持一维数组（不支持多维数组），并且没有限定数组的大小。\n类似于 C 语言，数组元素的下标由 0 开始编号。获取数组中的元素要利用下标，下标可以是整数或算术表达式，其值应大于或等于 0。\n定义数组 在 Shell 中，用括号来表示数组，数组元素用\u0026quot;空格\u0026quot;符号分割开。定义数组的一般形式为：\narray_name=(value0 value1 value2 value3) array_name=( value0 value1 value2 value3 ) array_name[0]=value0 array_name[1]=value1 array_name[n]=valuen 可以不使用连续的下标，而且下标的范围没有限制。\n读取数组 value_n=${array_name[n]} 使用 @ 符号可以获取数组中的所有元素，例如：\necho ${array_name[@]} 获取数组的长度 获取数组长度的方法与获取字符串长度的方法相同，例如：\n# 取得数组元素的个数 length=${#array_name[@]} # 或者 length=${#array_name[*]} # 取得数组单个元素的长度 lengthn=${#array_name[n]} Shell 注释 以 # 开头的行就是注释，会被解释器忽略。\n通过每一行加一个 # 号设置多行注释，像这样：\n#-------------------------------------------- # 这是一个注释 # author：菜鸟教程 # site：www.runoob.com # slogan：学的不仅是技术，更是梦想！ #-------------------------------------------- ##### 用户配置区 开始 ##### # # # 这里可以添加脚本描述信息 # # ##### 用户配置区 结束 ##### 如果在开发过程中，遇到大段的代码需要临时注释起来，过一会儿又取消注释，怎么办呢？\n每一行加个#符号太费力了，可以把这一段要注释的代码用一对花括号括起来，定义成一个函数，没有地方调用这个函数，这块代码就不会执行，达到了和注释一样的效果。\n多行注释 :\u0026lt;\u0026lt;EOF 注释内容... 注释内容... 注释内容... EOF EOF 也可以使用其他符号:\n:\u0026lt;\u0026lt;\u0026#39; 注释内容... 注释内容... 注释内容... \u0026#39; :\u0026lt;\u0026lt;! 注释内容... 注释内容... 注释内容... ! Shell 传递参数 我们可以在执行 Shell 脚本时，向脚本传递参数，脚本内获取参数的格式为：$n。n 代表一个数字，1 为执行脚本的第一个参数，2 为执行脚本的第二个参数，以此类推……\n以下实例我们向脚本传递三个参数，并分别输出，其中 $0 为执行的文件名（包含文件路径）：\n#!/bin/bash # author:菜鸟教程 # url:www.runoob.com echo \u0026#34;Shell 传递参数实例！\u0026#34;; echo \u0026#34;执行的文件名：$0\u0026#34;; echo \u0026#34;第一个参数为：$1\u0026#34;; echo \u0026#34;第二个参数为：$2\u0026#34;; echo \u0026#34;第三个参数为：$3\u0026#34;; 为脚本设置可执行权限，并执行脚本，输出结果如下所示：\n$ chmod +x test.sh $ ./test.sh 1 2 3 Shell 传递参数实例！ 执行的文件名：./test.sh 第一个参数为：1 第二个参数为：2 第三个参数为：3 另外，还有几个特殊字符用来处理参数：\n   参数处理 说明     $# 传递到脚本的参数个数   $* 以一个单字符串显示所有向脚本传递的参数。 如\u0026quot;$*\u0026ldquo;用「\u0026quot;」括起来的情况、以\u0026rdquo;$1 $2 … $n\u0026quot;的形式输出所有参数。   $$ 脚本运行的当前进程 ID 号   $! 后台运行的最后一个进程的 ID 号   $@ 与 $* 相同，但是使用时加引号，并在引号中返回每个参数。 如 \u0026quot;$@\u0026quot; 用 \u0026quot; 括起来的情况、以 \u0026quot;$1\u0026quot; \u0026quot;$2\u0026quot; … \u0026quot;$n\u0026quot; 的形式输出所有参数。   $- 显示 Shell 使用的当前选项，与 set 命令功能相同。   $? 显示最后命令的退出状态。0 表示没有错误，其他任何值表明有错误。    #!/bin/bash # author:菜鸟教程 # url:www.runoob.com echo \u0026#34;Shell 传递参数实例！\u0026#34;; echo \u0026#34;第一个参数为：$1\u0026#34;; echo \u0026#34;参数个数为：$#\u0026#34;; echo \u0026#34;传递的参数作为一个字符串显示：$*\u0026#34;; 执行脚本，输出结果如下所示：\n$ chmod +x test.sh $ ./test.sh 1 2 3 Shell 传递参数实例！ 第一个参数为：1 参数个数为：3 传递的参数作为一个字符串显示：1 2 3 $* 与 $@ 区别：\n 相同点：都是引用所有参数。 不同点：只有在双引号中体现出来。假设在脚本运行时写了三个参数 1、2、3，，则 \u0026quot; * \u0026quot; 等价于 \u0026ldquo;1 2 3\u0026rdquo;（传递了一个参数），而 \u0026ldquo;@\u0026rdquo; 等价于 \u0026ldquo;1\u0026rdquo; \u0026ldquo;2\u0026rdquo; \u0026ldquo;3\u0026rdquo;（传递了三个参数）。  #!/bin/bash # author:菜鸟教程 # url:www.runoob.com echo \u0026#34;-- \\$* 演示 ---\u0026#34; for i in \u0026#34;$*\u0026#34;; do echo $i done echo \u0026#34;-- \\$@ 演示 ---\u0026#34; for i in \u0026#34;$@\u0026#34;; do echo $i done 执行脚本，输出结果如下所示：\n$ chmod +x test.sh $ ./test.sh 1 2 3 -- $* 演示 --- 1 2 3 -- $@ 演示 --- 1 2 3 Shell 数组 数组中可以存放多个值。Bash Shell 只支持一维数组（不支持多维数组），初始化时不需要定义数组大小（与 PHP 类似）。\n与大部分编程语言类似，数组元素的下标由 0 开始。\nShell 数组用括号来表示，元素用\u0026quot;空格\u0026quot;符号分割开，语法格式如下：\narray_name=(value1 value2 ... valuen) #!/bin/bash # author:菜鸟教程 # url:www.runoob.com my_array=(A B \u0026#34;C\u0026#34; D) 我们也可以使用下标来定义数组:\narray_name[0]=value0 array_name[1]=value1 array_name[2]=value2 读取数组 读取数组元素值的一般格式是：\n${array_name[index]} #!/bin/bash # author:菜鸟教程 # url:www.runoob.com my_array=(A B \u0026#34;C\u0026#34; D) echo \u0026#34;第一个元素为: ${my_array[0]}\u0026#34; echo \u0026#34;第二个元素为: ${my_array[1]}\u0026#34; echo \u0026#34;第三个元素为: ${my_array[2]}\u0026#34; echo \u0026#34;第四个元素为: ${my_array[3]}\u0026#34; 执行脚本，输出结果如下所示：\n$ chmod +x test.sh $ ./test.sh 第一个元素为: A 第二个元素为: B 第三个元素为: C 第四个元素为: D 获取数组中的所有元素 使用 @ 或 * 可以获取数组中的所有元素，例如：\n#!/bin/bash # author:菜鸟教程 # url:www.runoob.com my_array[0]=A my_array[1]=B my_array[2]=C my_array[3]=D echo \u0026#34;数组的元素为: ${my_array[*]}\u0026#34; echo \u0026#34;数组的元素为: ${my_array[@]}\u0026#34; 执行脚本，输出结果如下所示：\n$ chmod +x test.sh $ ./test.sh 数组的元素为: A B C D 数组的元素为: A B C D 获取数组的长度 获取数组长度的方法与获取字符串长度的方法相同，例如：\n#!/bin/bash # author:菜鸟教程 # url:www.runoob.com my_array[0]=A my_array[1]=B my_array[2]=C my_array[3]=D echo \u0026#34;数组元素个数为: ${#my_array[*]}\u0026#34; echo \u0026#34;数组元素个数为: ${#my_array[@]}\u0026#34; 执行脚本，输出结果如下所示：\n$ chmod +x test.sh $ ./test.sh 数组元素个数为: 4 数组元素个数为: 4 Shell 基本运算符 Shell 和其他编程语言一样，支持多种运算符，包括：\n 算数运算符 关系运算符 布尔运算符 字符串运算符 文件测试运算符  原生 bash 不支持简单的数学运算，但是可以通过其他命令来实现，例如 awk 和 expr ， expr 最常用。\nexpr 是一款表达式计算工具，使用它能完成表达式的求值操作。\n例如，两个数相加(注意使用的是反引号 ` 而不是单引号 \u0026lsquo;)：\n#!/bin/bash  val=`expr 2 + 2` echo \u0026#34;两数之和为 : $val\u0026#34; 执行脚本，输出结果如下所示：\n两数之和为 : 4 两点注意：\n 表达式和运算符之间要有空格，例如 2+2 是不对的，必须写成 2 + 2，这与我们熟悉的大多数编程语言不一样。 完整的表达式要被 ` ` 包含，注意这个字符不是常用的单引号，在 Esc 键下边, Tab 键上边，与 MarkDown 中代码块的标记相同。  算术运算符 下表列出了常用的算术运算符，假定变量 a 为 10，变量 b 为 20：\n   运算符 说明 举例          + 加法 expr $a + $b 结果为 30。   - 减法 expr $a - $b 结果为 -10。   * 乘法 expr $a \\* $b 结果为 200。   / 除法 expr $b / $a 结果为 2。   % 取余 expr $b % $a 结果为 0。   = 赋值 a=$b 将把变量 b 的值赋给 a。   == 相等。用于比较两个数字，相同则返回 true。 [ $a == $b ] 返回 false。   != 不相等。用于比较两个数字，不相同则返回 true。 [ $a != $b ] 返回 true。    注意：条件表达式要放在方括号之间，并且要有空格，例如: [$a==$b] 是错误的，必须写成 [ $a == $b ]。\n算术运算符实例如下：\n#!/bin/bash # author:菜鸟教程 # url:www.runoob.com a=10 b=20 val=`expr $a + $b` echo \u0026#34;a + b : $val\u0026#34; val=`expr $a - $b` echo \u0026#34;a - b : $val\u0026#34; val=`expr $a \\* $b` echo \u0026#34;a * b : $val\u0026#34; val=`expr $b / $a` echo \u0026#34;b / a : $val\u0026#34; val=`expr $b % $a` echo \u0026#34;b % a : $val\u0026#34; if [ $a == $b ] then echo \u0026#34;a 等于 b\u0026#34; fi if [ $a != $b ] then echo \u0026#34;a 不等于 b\u0026#34; fi 执行脚本，输出结果如下所示：\na + b : 30 a - b : -10 a * b : 200 b / a : 2 b % a : 0 a 不等于 b  注意：\n 乘号(*)前边必须加反斜杠(\\)才能实现乘法运算； if\u0026hellip;then\u0026hellip;fi 是条件语句，后续将会讲解。 在 MAC 中 shell 的 expr 语法是：$((表达式))，此处表达式中的 \u0026ldquo;*\u0026rdquo; 不需要转义符号 \u0026ldquo;\u0026quot; 。   关系运算符 关系运算符只支持数字，不支持字符串，除非字符串的值是数字。\n下表列出了常用的关系运算符，假定变量 a 为 10，变量 b 为 20：\n   运算符 说明 举例     -eq 检测两个数是否相等，相等返回 true。 [ $a -eq $b ] 返回 false。   -ne 检测两个数是否不相等，不相等返回 true。 [ $a -ne $b ] 返回 true。   -gt 检测左边的数是否大于右边的，如果是，则返回 true。 [ $a -gt $b ] 返回 false。   -lt 检测左边的数是否小于右边的，如果是，则返回 true。 [ $a -lt $b ] 返回 true。   -ge 检测左边的数是否大于等于右边的，如果是，则返回 true。 [ $a -ge $b ] 返回 false。   -le 检测左边的数是否小于等于右边的，如果是，则返回 true。 [ $a -le $b ] 返回 true。    关系运算符实例如下：\n#!/bin/bash # author:菜鸟教程 # url:www.runoob.com a=10 b=20 if [ $a -eq $b ] then echo \u0026#34;$a-eq $b: a 等于 b\u0026#34; else echo \u0026#34;$a-eq $b: a 不等于 b\u0026#34; fi if [ $a -ne $b ] then echo \u0026#34;$a-ne $b: a 不等于 b\u0026#34; else echo \u0026#34;$a-ne $b: a 等于 b\u0026#34; fi if [ $a -gt $b ] then echo \u0026#34;$a-gt $b: a 大于 b\u0026#34; else echo \u0026#34;$a-gt $b: a 不大于 b\u0026#34; fi if [ $a -lt $b ] then echo \u0026#34;$a-lt $b: a 小于 b\u0026#34; else echo \u0026#34;$a-lt $b: a 不小于 b\u0026#34; fi if [ $a -ge $b ] then echo \u0026#34;$a-ge $b: a 大于或等于 b\u0026#34; else echo \u0026#34;$a-ge $b: a 小于 b\u0026#34; fi if [ $a -le $b ] then echo \u0026#34;$a-le $b: a 小于或等于 b\u0026#34; else echo \u0026#34;$a-le $b: a 大于 b\u0026#34; fi 执行脚本，输出结果如下所示：\n10 -eq 20: a 不等于 b 10 -ne 20: a 不等于 b 10 -gt 20: a 不大于 b 10 -lt 20: a 小于 b 10 -ge 20: a 小于 b 10 -le 20: a 小于或等于 b 布尔运算符 下表列出了常用的布尔运算符，假定变量 a 为 10，变量 b 为 20：\n   运算符 说明 举例     ! 非运算，表达式为 true 则返回 false，否则返回 true。 [ ! false ] 返回 true。   -o 或运算，有一个表达式为 true 则返回 true。 [ $a -lt 20 -o $b -gt 100 ] 返回 true。   -a 与运算，两个表达式都为 true 才返回 true。 [ $a -lt 20 -a $b -gt 100 ] 返回 false。    布尔运算符实例如下：\n#!/bin/bash # author:菜鸟教程 # url:www.runoob.com a=10 b=20 if [ $a != $b ] then echo \u0026#34;$a!= $b: a 不等于 b\u0026#34; else echo \u0026#34;$a== $b: a 等于 b\u0026#34; fi if [ $a -lt 100 -a $b -gt 15 ] then echo \u0026#34;$a小于 100 且 $b大于 15 : 返回 true\u0026#34; else echo \u0026#34;$a小于 100 且 $b大于 15 : 返回 false\u0026#34; fi if [ $a -lt 100 -o $b -gt 100 ] then echo \u0026#34;$a小于 100 或 $b大于 100 : 返回 true\u0026#34; else echo \u0026#34;$a小于 100 或 $b大于 100 : 返回 false\u0026#34; fi if [ $a -lt 5 -o $b -gt 100 ] then echo \u0026#34;$a小于 5 或 $b大于 100 : 返回 true\u0026#34; else echo \u0026#34;$a小于 5 或 $b大于 100 : 返回 false\u0026#34; fi 执行脚本，输出结果如下所示：\n10 != 20 : a 不等于 b 10 小于 100 且 20 大于 15 : 返回 true 10 小于 100 或 20 大于 100 : 返回 true 10 小于 5 或 20 大于 100 : 返回 false 逻辑运算符 以下介绍 Shell 的逻辑运算符，假定变量 a 为 10，变量 b 为 20:\n   运算符 说明 举例     \u0026amp;\u0026amp; 逻辑的 AND [[ $a -lt 100 \u0026amp;\u0026amp; $b -gt 100 ]] 返回 false   || 逻辑的 OR [[ $a -lt 100 || $b -gt 100 ]] 返回 true    逻辑运算符实例如下：\n#!/bin/bash # author:菜鸟教程 # url:www.runoob.com a=10 b=20 if [[ $a -lt 100 \u0026amp;\u0026amp; $b -gt 100 ]] then echo \u0026#34;返回 true\u0026#34; else echo \u0026#34;返回 false\u0026#34; fi if [[ $a -lt 100 || $b -gt 100 ]] then echo \u0026#34;返回 true\u0026#34; else echo \u0026#34;返回 false\u0026#34; fi 执行脚本，输出结果如下所示：\n返回 false 返回 true 字符串运算符 下表列出了常用的字符串运算符，假定变量 a 为 \u0026ldquo;abc\u0026rdquo;，变量 b 为 \u0026ldquo;efg\u0026rdquo;：\n   运算符 说明 举例     = 检测两个字符串是否相等，相等返回 true。 [ $a = $b ] 返回 false。   != 检测两个字符串是否相等，不相等返回 true。 [ $a != $b ] 返回 true。   -z 检测字符串长度是否为 0，为 0 返回 true。 [ -z $a ] 返回 false。   -n 检测字符串长度是否不为 0，不为 0 返回 true。 [ -n \u0026ldquo;$a\u0026rdquo; ] 返回 true。   $ 检测字符串是否为空，不为空返回 true。 [ $a ] 返回 true。    字符串运算符实例如下：\n#!/bin/bash # author:菜鸟教程 # url:www.runoob.com a=\u0026#34;abc\u0026#34; b=\u0026#34;efg\u0026#34; if [ $a = $b ] then echo \u0026#34;$a= $b: a 等于 b\u0026#34; else echo \u0026#34;$a= $b: a 不等于 b\u0026#34; fi if [ $a != $b ] then echo \u0026#34;$a!= $b: a 不等于 b\u0026#34; else echo \u0026#34;$a!= $b: a 等于 b\u0026#34; fi if [ -z $a ] then echo \u0026#34;-z $a: 字符串长度为 0\u0026#34; else echo \u0026#34;-z $a: 字符串长度不为 0\u0026#34; fi if [ -n \u0026#34;$a\u0026#34; ] then echo \u0026#34;-n $a: 字符串长度不为 0\u0026#34; else echo \u0026#34;-n $a: 字符串长度为 0\u0026#34; fi if [ $a ] then echo \u0026#34;$a: 字符串不为空\u0026#34; else echo \u0026#34;$a: 字符串为空\u0026#34; fi 执行脚本，输出结果如下所示：\nabc = efg: a 不等于 b abc != efg : a 不等于 b -z abc : 字符串长度不为 0 -n abc : 字符串长度不为 0 abc : 字符串不为空 文件测试运算符 文件测试运算符用于检测 Unix 文件的各种属性。\n属性检测描述如下：\n   操作符 说明 举例     -b file 检测文件是否是块设备文件，如果是，则返回 true。 [ -b $file ] 返回 false。   -c file 检测文件是否是字符设备文件，如果是，则返回 true。 [ -c $file ] 返回 false。   -d file 检测文件是否是目录，如果是，则返回 true。 [ -d $file ] 返回 false。   -f file 检测文件是否是普通文件（既不是目录，也不是设备文件），如果是，则返回 true。 [ -f $file ] 返回 true。   -g file 检测文件是否设置了 SGID 位，如果是，则返回 true。 [ -g $file ] 返回 false。   -k file 检测文件是否设置了粘着位(Sticky Bit)，如果是，则返回 true。 [ -k $file ] 返回 false。   -p file 检测文件是否是有名管道，如果是，则返回 true。 [ -p $file ] 返回 false。   -u file 检测文件是否设置了 SUID 位，如果是，则返回 true。 [ -u $file ] 返回 false。   -r file 检测文件是否可读，如果是，则返回 true。 [ -r $file ] 返回 true。   -w file 检测文件是否可写，如果是，则返回 true。 [ -w $file ] 返回 true。   -x file 检测文件是否可执行，如果是，则返回 true。 [ -x $file ] 返回 true。   -s file 检测文件是否为空（文件大小是否大于 0），不为空返回 true。 [ -s $file ] 返回 true。   -e file 检测文件（包括目录）是否存在，如果是，则返回 true。 [ -e $file ] 返回 true。    其他检查符：\n -S: 判断某文件是否 socket。 -L: 检测文件是否存在并且是一个符号链接。   变量 file 表示文件 /var/www/runoob/test.sh，它的大小为 100 字节，具有 rwx 权限。下面的代码，将检测该文件的各种属性：\n #!/bin/bash # author:菜鸟教程 # url:www.runoob.com file=\u0026#34;/var/www/runoob/test.sh\u0026#34; if [ -r $file ] then echo \u0026#34;文件可读\u0026#34; else echo \u0026#34;文件不可读\u0026#34; fi if [ -w $file ] then echo \u0026#34;文件可写\u0026#34; else echo \u0026#34;文件不可写\u0026#34; fi if [ -x $file ] then echo \u0026#34;文件可执行\u0026#34; else echo \u0026#34;文件不可执行\u0026#34; fi if [ -f $file ] then echo \u0026#34;文件为普通文件\u0026#34; else echo \u0026#34;文件为特殊文件\u0026#34; fi if [ -d $file ] then echo \u0026#34;文件是个目录\u0026#34; else echo \u0026#34;文件不是个目录\u0026#34; fi if [ -s $file ] then echo \u0026#34;文件不为空\u0026#34; else echo \u0026#34;文件为空\u0026#34; fi if [ -e $file ] then echo \u0026#34;文件存在\u0026#34; else echo \u0026#34;文件不存在\u0026#34; fi 执行脚本，输出结果如下所示：\n文件可读 文件可写 文件可执行 文件为普通文件 文件不是个目录 文件不为空 文件存在 ","permalink":"https://aimerneige.com/en/draft/shell/","summary":"Shell 学习笔记  本文章内容整理自 菜鸟教程 RUNOOB.COM\n本文章版权均归 菜鸟教程 所有 (有删改)\nhttps://www.runoob.com/linux/linux-shell.html\n Hello World #!/bin/bash echo \u0026#34;Hello World!\u0026#34; 变量 定义变量 定义变量时，变量名不加美元符号\nyour_name=\u0026#34;AimerNeige\u0026#34; 命名规则  命名只能使用英文字母，数字和下划线，首个字符不能以数字开头。 中间不能有空格，可以使用下划线（_）。 不能使用标点符号。 不能使用 bash 里的关键字（可用 help 命令查看保留关键字）。  隐式赋值 for file in `ls /etc` 或 for file in $(ls /etc) 使用变量 使用一个定义过的变量，只要在变量名前面加美元符号即可\nyour_name=\u0026#34;AimerNeige\u0026#34; echo $your_name echo ${your_name} 变量名外面的花括号是可选的，加不加都行，加花括号是为了帮助解释器识别变量的边界，比如下面这种情况：\nfor skill in Ada Coffe Action Java; do echo \u0026#34;I am good at ${skill}Script\u0026#34; done 如果不给 skill 变量加花括号，写成 echo \u0026quot;I am good at $skillScript\u0026quot;，解释器就会把 $skillScript 当成一个变量（其值为空），代码执行结果就不是我们期望的样子了。","title":""},{"content":"Spring Boot 什么是 spring boot ","permalink":"https://aimerneige.com/en/draft/springboot/","summary":"Spring Boot 什么是 spring boot ","title":""},{"content":"To add and clone a new submodule $ git submodule add https://github.com/chaconinc/DbConnector $ git clone https://github.com/chaconinc/MainProject $ git submodule init $ git submodule update\n","permalink":"https://aimerneige.com/en/draft/submodule/","summary":"To add and clone a new submodule $ git submodule add https://github.com/chaconinc/DbConnector $ git clone https://github.com/chaconinc/MainProject $ git submodule init $ git submodule update","title":""},{"content":"https://www.youtube.com/watch?v=iNITVjVLpxI\n","permalink":"https://aimerneige.com/en/draft/tcp_ip/","summary":"https://www.youtube.com/watch?v=iNITVjVLpxI","title":""},{"content":"File Share 当我们需要上传并共享文件的时候，我们会有以下选择：\n 百度网盘 Google Drive Dropbox 私人网盘服务器  但是这些方案都或多或少存在问题，比如百度会限速，Google Drive 和 Dropbox 需要翻墙，私人网盘服务器不仅搭建麻烦，而且服务器的费用也很高。\n百度爬\n奶牛快传  国内 最大支持2GB 可以设置密码 保存7天  求是潮云U盘  国内 最大支持100M 可以设置密码 保存30天  Send Firefox  国外 最大支持1GB 可以设置密码 保存1天  BitSend  国外 文件大小不限 可以设置密码 保存14天  Fast Uploader  国外 最大支持2GB 可以设置密码 保存30天  Drop.Me  国外 文件大小不限 不可以设置密码 无限期分享  dmca.gripe  国外 最大支持5120MB 不可以设置密码  coka.la  国外 最大支持512MB 不可以设置密码  ==================================== 奶牛快传：https://cowtransfer.com/ 上传最大容量：2GB 免费用户可以保存7天 求是潮云 U 盘：https://box.zjuqsc.com/ 上传最大容量：100MB 支持最大 30 天的临时存储 Send Firefox：https://send.firefox.com/ 上传最大容量：1GB 首次下载或 24 小时候自动失效，链接到期后文件将从网上彻底抹去。 BitSend：https://bitsend.jp/?setLang=zh-tw 没有容量限制和流量限制 最多可选择保留 14 天 fast-uploader：http://fast-uploader.com/ 上传最大容量：2GB 最多可选择保留 30 天 上传下载几乎和国内网盘差不多速度 drop.me：https://drop.me/\n上传最大容量：不限文件容量，可以上传任何格式的文件。 文件无限期 国内的速度一般 tmp.link：http://tmp.link/ 上传最大容量：5GB 默认有效期 3 天，当分享的文件在有效期内有人下载时，自动刷新有效期，有效期结束后失效。 这个链接是热链，只要有人下载，自动刷新有效期。如果你点开链接发现文件已删除，那么说明在 3 天内没有人下载。 dmca.gripe: https://dmca.gripe/\n上传最大容量：5120MB 文件无限期 coka.la: https://coka.la/ 上传最大容量：512MB 文件无限期 https://www.youtube.com/watch?v=7hNxIj8e1HA\nTransfer https://transfer.sh/\n","permalink":"https://aimerneige.com/en/draft/transfer/","summary":"File Share 当我们需要上传并共享文件的时候，我们会有以下选择：\n 百度网盘 Google Drive Dropbox 私人网盘服务器  但是这些方案都或多或少存在问题，比如百度会限速，Google Drive 和 Dropbox 需要翻墙，私人网盘服务器不仅搭建麻烦，而且服务器的费用也很高。\n百度爬\n奶牛快传  国内 最大支持2GB 可以设置密码 保存7天  求是潮云U盘  国内 最大支持100M 可以设置密码 保存30天  Send Firefox  国外 最大支持1GB 可以设置密码 保存1天  BitSend  国外 文件大小不限 可以设置密码 保存14天  Fast Uploader  国外 最大支持2GB 可以设置密码 保存30天  Drop.Me  国外 文件大小不限 不可以设置密码 无限期分享  dmca.gripe  国外 最大支持5120MB 不可以设置密码  coka.la  国外 最大支持512MB 不可以设置密码  ==================================== 奶牛快传：https://cowtransfer.","title":""},{"content":"Vue 学习记录 首先贴个官网：\n 官网 https://vuejs.org/ 中文官网 https://cn.vuejs.org/  vuejs 简单介绍 WHY VUE.JS? 快速了解 vuejs\nhttps://www.youtube.com/watch?v=p1iLqZnZPdo\n作者 vuejs 的作者是来之中国的尤雨溪，你可以在下面的百度百科中查看关于作者的更多信息：\n百度百科-尤雨溪\nvuejs 的优势？  体积小 更高的运行效率 双向数据绑定 生态丰富 中文资料多  安装 vuejs chrome 扩展 安装下面的 chrome 扩展，可以更加方便地在 chrome 中调试 vue 应用。\nhttps://github.com/vuejs/vue-devtools\n直接引入 按照官网的描述，直接通过下面的方法将 html 代码嵌入 html 即可：\n\u0026lt;!-- 开发环境版本，包含了有帮助的命令行警告 --\u0026gt; \u0026lt;script src=\u0026#34;https://cdn.jsdelivr.net/npm/vue/dist/vue.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;!-- 生产环境版本，优化了尺寸和速度 --\u0026gt; \u0026lt;script src=\u0026#34;https://cdn.jsdelivr.net/npm/vue\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; 在学习过程中我们使用开发环境版本。\n当然你也可以直接下载 vuejs 然后引用本地文件。\nvue-cli https://cn.vuejs.org/v2/guide/installation.html#%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%B7%A5%E5%85%B7-CLI\n不建议初学者使用 vue-cli 工具\n构建第一个 vuejs 应用 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Hello Vue\u0026lt;/title\u0026gt; \u0026lt;script src=\u0026#34;https://cdn.jsdelivr.net/npm/vue/dist/vue.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div id=\u0026#34;app\u0026#34;\u0026gt; \u0026lt;h1\u0026gt; {{ title }} \u0026lt;/h1\u0026gt; \u0026lt;p\u0026gt; {{ message }} \u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;script type=\u0026#34;application/javascript\u0026#34;\u0026gt; const app = new Vue({ el: \u0026#34;#app\u0026#34;, data: { title: \u0026#34;Hello World!\u0026#34;, message: \u0026#34;Hello World! Welcome to vue.js\u0026#34;, } }); \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 数据与方法 创建 vue 实例后，可以通过修改实例或数据的形式来更改显示内容。\n\u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Hello Vue\u0026lt;/title\u0026gt; \u0026lt;script src=\u0026#34;https://cdn.jsdelivr.net/npm/vue/dist/vue.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div id=\u0026#34;app\u0026#34;\u0026gt; \u0026lt;h1\u0026gt; {{ title }} \u0026lt;/h1\u0026gt; \u0026lt;p\u0026gt; {{ message }} \u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;script type=\u0026#34;application/javascript\u0026#34;\u0026gt; const data = { title: \u0026#34;Hello World!\u0026#34;, message: \u0026#34;Hello World! Welcome to vue.js\u0026#34;, }; const vm = new Vue({ el: \u0026#34;#app\u0026#34;, data: data }); // vm.title = \u0026#34;Hello World!\u0026#34;;  data.title = \u0026#34;Hello Vue!\u0026#34;; \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 如果想要显示和修改数据，则必须在创建 vue 实例前创建这个变量，否者是无效的。\n\u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Hello Vue\u0026lt;/title\u0026gt; \u0026lt;script src=\u0026#34;https://cdn.jsdelivr.net/npm/vue/dist/vue.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div id=\u0026#34;app\u0026#34;\u0026gt; \u0026lt;h1\u0026gt; {{ title }} \u0026lt;/h1\u0026gt; \u0026lt;p\u0026gt; {{ message }} \u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;script type=\u0026#34;application/javascript\u0026#34;\u0026gt; const data = { title: \u0026#34;Hello World!\u0026#34;, }; const vm = new Vue({ el: \u0026#34;#app\u0026#34;, data: data }); // vm.message = \u0026#34;Hello World! Welcome to vue.js\u0026#34;;  data.message = \u0026#34;Hello World! Welcome to vue.js\u0026#34;; \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; watch 方法可以监听某个变量的变化：\n\u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Hello Vue\u0026lt;/title\u0026gt; \u0026lt;script src=\u0026#34;https://cdn.jsdelivr.net/npm/vue/dist/vue.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div id=\u0026#34;app\u0026#34;\u0026gt; \u0026lt;h1\u0026gt; {{ title }} \u0026lt;/h1\u0026gt; \u0026lt;p\u0026gt; {{ message }} \u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;script type=\u0026#34;application/javascript\u0026#34;\u0026gt; const data = { title: \u0026#34;Hello World!\u0026#34;, message: \u0026#34;Hello World! Welcome to vue.js\u0026#34;, }; const vm = new Vue({ el: \u0026#34;#app\u0026#34;, data: data }); vm.$watch(\u0026#34;title\u0026#34;, function (newVal, oldVal) { console.log(\u0026#34;newVal:\\t\u0026#34;, newVal); console.log(\u0026#34;oldVal:\\t\u0026#34;, oldVal); }); \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 生命周期 模版语法 文本 使用双大括号包裹，变量 meg 的内容会被渲染进视图。\n\u0026lt;span\u0026gt;Message: {{ msg }}\u0026lt;/span\u0026gt; 使用 v-once 能执行一次性地插值，当数据改变时，插值处的内容不会更新。\n\u0026lt;span v-once\u0026gt;这个将不会改变: {{ msg }}\u0026lt;/span\u0026gt; \u0026lt;p\u0026gt;Using mustaches: {{ rawHtml }}\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;Using v-html directive: \u0026lt;span v-html=\u0026#34;rawHtml\u0026#34;\u0026gt;\u0026lt;/span\u0026gt;\u0026lt;/p\u0026gt; ","permalink":"https://aimerneige.com/en/draft/vue/","summary":"Vue 学习记录 首先贴个官网：\n 官网 https://vuejs.org/ 中文官网 https://cn.vuejs.org/  vuejs 简单介绍 WHY VUE.JS? 快速了解 vuejs\nhttps://www.youtube.com/watch?v=p1iLqZnZPdo\n作者 vuejs 的作者是来之中国的尤雨溪，你可以在下面的百度百科中查看关于作者的更多信息：\n百度百科-尤雨溪\nvuejs 的优势？  体积小 更高的运行效率 双向数据绑定 生态丰富 中文资料多  安装 vuejs chrome 扩展 安装下面的 chrome 扩展，可以更加方便地在 chrome 中调试 vue 应用。\nhttps://github.com/vuejs/vue-devtools\n直接引入 按照官网的描述，直接通过下面的方法将 html 代码嵌入 html 即可：\n\u0026lt;!-- 开发环境版本，包含了有帮助的命令行警告 --\u0026gt; \u0026lt;script src=\u0026#34;https://cdn.jsdelivr.net/npm/vue/dist/vue.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;!-- 生产环境版本，优化了尺寸和速度 --\u0026gt; \u0026lt;script src=\u0026#34;https://cdn.jsdelivr.net/npm/vue\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; 在学习过程中我们使用开发环境版本。\n当然你也可以直接下载 vuejs 然后引用本地文件。\nvue-cli https://cn.vuejs.org/v2/guide/installation.html#%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%B7%A5%E5%85%B7-CLI\n不建议初学者使用 vue-cli 工具\n构建第一个 vuejs 应用 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Hello Vue\u0026lt;/title\u0026gt; \u0026lt;script src=\u0026#34;https://cdn.","title":""},{"content":"","permalink":"https://aimerneige.com/en/draft/web_beginning/","summary":"","title":""},{"content":"MacTray\nPowerToy\n","permalink":"https://aimerneige.com/en/draft/windowssoftware/","summary":"MacTray\nPowerToy","title":""},{"content":" A Student from the North University of China Learning IoT. Linux user, love open source and share.\n Skills  Languages, software and services used\n  golang python JavaScript vala Linux git mysql  Tools  neovim VSCode VirtualBox Dbeaver Joplin Spotify  Language  Chinese English  Education  North University of China Ningwu Senior High School Ningwu No.1 Middle School  Contact Me GitHub: https://github.com/AimerNeige/\nEmail: aimer.neige@aimerneige.com\nTelegram: @AimerNeige\nMy Domain: aimerneige.com neige.icu\n","permalink":"https://aimerneige.com/en/about/","summary":"A Student from the North University of China Learning IoT. Linux user, love open source and share.\n Skills  Languages, software and services used\n  golang python JavaScript vala Linux git mysql  Tools  neovim VSCode VirtualBox Dbeaver Joplin Spotify  Language  Chinese English  Education  North University of China Ningwu Senior High School Ningwu No.1 Middle School  Contact Me GitHub: https://github.com/AimerNeige/\nEmail: aimer.","title":"About Me 👨‍💻"},{"content":"Building\u0026hellip;\n- { title: \u0026#39;伞\u0026#39;, intro: \u0026#39;一只咸鱼的学习记录\u0026#39;, link: \u0026#39;https://farewell12345.github.io/\u0026#39;, github: \u0026#39;https://github.com/farewell12345\u0026#39;, image: \u0026#39;https://avatars.githubusercontent.com/u/53655863?v=4\u0026#39; } - { title: \u0026#39;HelloWorld的小博客\u0026#39;, intro: \u0026#39;这里是一个小白的博客\u0026#39;, link: \u0026#39;https://mzdluo123.github.io/\u0026#39;, github: \u0026#39;https://github.com/mzdluo123\u0026#39;, image: \u0026#39;https://avatars.githubusercontent.com/u/23146087?v=4\u0026#39; } - { title: \u0026#39;TangZ\u0026#39;, intro: \u0026#39;TangZ 的个人页面\u0026#39;, link: \u0026#39;https://wstzj.github.io/\u0026#39;, github: \u0026#39;https://github.com/wstzj\u0026#39;, image: \u0026#39;https://avatars.githubusercontent.com/u/55931768?v=4\u0026#39; } - { title: \u0026#39;Kenvix\u0026#39;, intro: \u0026#39;党明学姐\u0026#39;, link: \u0026#39;https://kenvix.com/\u0026#39;, github: \u0026#39;https://github.com/kenvix\u0026#39;, image: \u0026#39;https://avatars.githubusercontent.com/u/4546175?v=4\u0026#39; } - { title: \u0026#39;HeoLis\u0026#39;, intro: \u0026#39;We need to go faster and deeper.\u0026#39;, link: \u0026#39;http://ishero.net/\u0026#39;, github: \u0026#39;https://github.com/wmpscc\u0026#39;, image: \u0026#39;https://avatars.githubusercontent.com/u/29891793?v=4\u0026#39; } - { title: \u0026#39;🔨\u0026#39;, intro: \u0026#39;🔨のBlog\u0026#39;, link: \u0026#39;https://geekhe-p.github.io/\u0026#39;, github: \u0026#39;https://github.com/geekhe-p\u0026#39;, image: \u0026#39;https://avatars.githubusercontent.com/u/55914926?v=4\u0026#39; } - { title: \u0026#39;异国迷宫的十字路口\u0026#39;, intro: \u0026#39;一位弱鸡带学生的个人博客\u0026#39;, link: \u0026#39;https://blog.fivezha.cn/\u0026#39;, github: \u0026#39;https://github.com/xmmmmmovo\u0026#39;, image: \u0026#39;https://avatars.githubusercontent.com/u/32405482?v=4\u0026#39; } - { title: \u0026#39;Gaein nidb\u0026#39;, intro: \u0026#39;Gaein nidb的网站\u0026#39;, link: \u0026#39;https://www.gaein.cn/\u0026#39;, github: \u0026#39;https://github.com/nidbCN\u0026#39;, image: \u0026#39;https://avatars.githubusercontent.com/u/36162655?v=4\u0026#39; } - { title: \u0026#39;fzf404\u0026#39;, intro: \u0026#39;fzf的网站\u0026#39;, link: \u0026#39;https://fzf404.top/\u0026#39;, github: \u0026#39;https://github.com/fzf404\u0026#39;, image: \u0026#39;https://avatars.githubusercontent.com/u/40832831?v=4\u0026#39; } - { title: \u0026#39;凛凛酱\u0026#39;, intro: \u0026#39;傻逼凛凛\u0026#39;, link: \u0026#39;https://baolong24.github.io/\u0026#39;, github: \u0026#39;https://github.com/baolong24\u0026#39;, image: \u0026#39;https://avatars.githubusercontent.com/u/30337499?v=4\u0026#39; } - { title: \u0026#39;Web-Worker\u0026#39;, intro: \u0026#39;道阻且长,行则将至。\u0026#39;, link: \u0026#39;https://web-worker.cn/\u0026#39;, github: \u0026#39;https://github.com/Star-caorui\u0026#39;, image: \u0026#39;https://avatars.githubusercontent.com/u/51264180?v=4\u0026#39; } - { title: \u0026#39;vritser\u0026#39;, intro: \u0026#39;半斤八两\u0026#39;, link: \u0026#39;https://vritser.github.io/\u0026#39;, github: \u0026#39;https://github.com/vritser\u0026#39;, image: \u0026#39;https://avatars.githubusercontent.com/u/16340478?v=4\u0026#39; } ","permalink":"https://aimerneige.com/en/friends/","summary":"Building\u0026hellip;\n- { title: \u0026#39;伞\u0026#39;, intro: \u0026#39;一只咸鱼的学习记录\u0026#39;, link: \u0026#39;https://farewell12345.github.io/\u0026#39;, github: \u0026#39;https://github.com/farewell12345\u0026#39;, image: \u0026#39;https://avatars.githubusercontent.com/u/53655863?v=4\u0026#39; } - { title: \u0026#39;HelloWorld的小博客\u0026#39;, intro: \u0026#39;这里是一个小白的博客\u0026#39;, link: \u0026#39;https://mzdluo123.github.io/\u0026#39;, github: \u0026#39;https://github.com/mzdluo123\u0026#39;, image: \u0026#39;https://avatars.githubusercontent.com/u/23146087?v=4\u0026#39; } - { title: \u0026#39;TangZ\u0026#39;, intro: \u0026#39;TangZ 的个人页面\u0026#39;, link: \u0026#39;https://wstzj.github.io/\u0026#39;, github: \u0026#39;https://github.com/wstzj\u0026#39;, image: \u0026#39;https://avatars.githubusercontent.com/u/55931768?v=4\u0026#39; } - { title: \u0026#39;Kenvix\u0026#39;, intro: \u0026#39;党明学姐\u0026#39;, link: \u0026#39;https://kenvix.com/\u0026#39;, github: \u0026#39;https://github.com/kenvix\u0026#39;, image: \u0026#39;https://avatars.githubusercontent.com/u/4546175?v=4\u0026#39; } - { title: \u0026#39;HeoLis\u0026#39;, intro: \u0026#39;We need to go faster and deeper.\u0026#39;, link: \u0026#39;http://ishero.net/\u0026#39;, github: \u0026#39;https://github.com/wmpscc\u0026#39;, image: \u0026#39;https://avatars.","title":"Friends"}]