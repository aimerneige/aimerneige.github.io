[{"content":" This article are reproduce from pretzelhammer/rust-blog\n Intro When I started learning Rust I made the mistake of following the advice to read The Book first. While it\u0026rsquo;s a great resource, it\u0026rsquo;s pretty overwhelming for a beginner to get told \u0026ldquo;If you\u0026rsquo;d like to learn this programming language the best way to start is to read this 20 chapter book!\u0026rdquo; Most people give up before they even get started when they get advice like this. Nobody ever told someone to read a 20 chapter book just to get started with Javascript or Python. Rust\u0026rsquo;s learning curve is no joke but you gotta give the people what they want, and they want to program, not read about programming. Programming is fun and reading about programming is not as fun.\nThe first 10% of this article is gonna be me giving you advice on how to learn Rust in 2020 following a practical hands-on coding approach. This is the good part of the article. You can safely exit after this part (I\u0026rsquo;ll tell you when). The remaining 90% of this article is me ranting about how most online coding challenge sites have poor support for Rust.\nTL;DR If you\u0026rsquo;re a total Rust newbie and want to learn as much as possible in just one day you should read fasterthanlime\u0026rsquo;s excellent A half-hour to learn Rust and then checkout the awesome Rustlings repo and complete the exercises.\nIf you\u0026rsquo;re a Rust beginner you should get started on Exercism\u0026rsquo;s Rust Track. If you get stuck you should ask your friends Google and StackOverflow for help. I recommend taking the time to get comfortable reading and navigating the Rust Standard Library Docs which is amazing and has simple practical examples for how to use everything inside of it. Rust by Example is also a really good high-level reference that you can use to quickly learn Rust syntax and features. If you want to gain a deeper understanding of a certain Rust concept only then do I recommend finding the appropriate chapter in The Book to read. The best part of completing an exercise on Exercism is that you get access to all the solutions by other members which you can sort by most-starred to see particularly idiomatic or clever solutions. This is a great way to learn!\nAt this point you\u0026rsquo;re probably an advanced beginner and can find your own path. If you need more guidance and would like to continue working on small simple programs I recommend doing the exercises from the Advent of Code 2018 Calendar. The reason why I specifically recommended the 2018 calendar is because once you\u0026rsquo;re finished with an exercise you can compare your solution to BurntSushi\u0026rsquo;s Advent of Code 2018 Rust solutions. BurntSushi writes really clean, readable, idiomatic Rust code. Reading the code of an experienced Rustacean will teach you as much as the exercises themselves.\nExit now, the good part of the article is over.\nPractical Rust Resource Reviews Alternative title: Reviews of Free Online Resources a Rust Beginner can use to Practice Writing Small Simple Rust Programs\nMost of these resources weren\u0026rsquo;t specifically created for the purpose of teaching Rust, however they can all be used to learn and practice Rust and many of them explicitly support Rust submissions and provide Rust-specific versions of problems.\nThe resources are ordered from worst to best.\nHackerRank Rust is a supported language on HackerRank except you aren\u0026rsquo;t allowed to submit Rust solutions to most of the problems on their site. I tried to upload my solution directly and they refused it:\nThis is really strange because I was able to browse Rust solutions for the problem above submitted by other HackerRank users, so it\u0026rsquo;s possible to submit a Rust solution somehow. I tried Googling this issue but Google didn\u0026rsquo;t return any useful results. There\u0026rsquo;s no way for me to evaluate HackerRank other than to tell you not to waste your time with it like I did.\nProject Euler When I first started to learn programming back in 2012 I commonly heard \u0026ldquo;If you wanna get up to speed quickly in a new programming language solve some Project Euler problems with it!\u0026rdquo; which was okay advice at the time since there were not many other alternatives but in my opinion Project Euler has very little to do with programming. Project Euler problems are more math problems than they are programming problems. Their challenge lies almost entirely in the mathematical reasoning required to reach the solution as the programming required is usually trivial. I would not recommend solving Project Euler problems as a way to learn Rust unless you\u0026rsquo;re very mathematically inclined and have some nostalgia for the site.\nLeetCode Rust is a supported language on LeetCode. For every problem on LeetCode you get a solution template which usually contains a single unimplemented function which you then have to implement and submit in order to solve the problem. For more involved problems the solution template might include a struct and an impl block with several unimplemented methods. Unfortunately, these solution templates are not created by humans, they are automatically generated, which results in a lot of really awkward and unidiomatic Rust code. Examples:\n   LeetCode generated Rust Idiomatic Rust     tree problems represent links as Option\u0026lt;Rc\u0026lt;RefCell\u0026lt;Node\u0026gt;\u0026gt;\u0026gt; Option\u0026lt;Rc\u0026lt;RefCell\u0026lt;Node\u0026gt;\u0026gt;\u0026gt; is overkill for tree links and Option\u0026lt;Box\u0026lt;Node\u0026gt;\u0026gt; works just as well and is much easier to work with   methods which obviously mutate self still borrow it immutably, e.g. fn insert(\u0026amp;self, val: i32) methods that mutate self need to borrow it mutably, e.g. fn insert(\u0026amp;mut self, val: i32)   signed 32-bit integers are used for all numbers, even if the problem is undefined for negative integers, e.g. fn nth_fib(n: i32) -\u0026gt; i32 problems which are undefined for negative integers should use unsigned integers, e.g. fn nth_fib(n: u32) -\u0026gt; u32   functions always take ownership of their arguments, even if it\u0026rsquo;s unnecessary, e.g. fn sum(nums: Vec\u0026lt;i32\u0026gt;) -\u0026gt; i32 if you don\u0026rsquo;t need ownership then borrow fn sum(nums: \u0026amp;[i32]) -\u0026gt; i32   functions sometimes ignore basic error cases, e.g. for fn get_max(nums: Vec\u0026lt;i32\u0026gt;) -\u0026gt; i32 what i32 should be returned if nums is empty? if a result might be undefined the return type should be wrapped in an Option, e.g. fn get_max(nums: \u0026amp;[i32]) -\u0026gt; Option\u0026lt;i32\u0026gt;    Other LeetCode issues, specific to Rust:\n LeetCode doesn\u0026rsquo;t allow you to pull in 3rd-party dependencies in solutions. Normally I think this is okay for most languages but Rust in particular has a pretty slim standard library which doesn\u0026rsquo;t even include regex support so a lot of the more complex string parsing problems on LeetCode are pointlessly difficult to solve in Rust but have otherwise trivial solutions in other languages which have regex support in their standard libraries. None of the problems in the concurrency category accept solutions in Rust. What? Fearless concurrency is one of Rust\u0026rsquo;s major selling points! After solving a problem you can go to the problem\u0026rsquo;s comments section to see other user\u0026rsquo;s solutions (as many users like to publish their solutions there) but because Rust isn\u0026rsquo;t very popular on LeetCode sometimes you won\u0026rsquo;t find any Rust solutions ;(  General LeetCode issues:\n LeetCode has a surprising amount of very low quality problems. Problems can be liked and disliked by users but problems are never removed even if they hit very high dislike ratios. I\u0026rsquo;ve seen lots of problems with 100+ votes and 80%+ dislike ratios and I don\u0026rsquo;t understand why they are kept on the site. Problem difficulty ratings are kinda off. Problems are rated as Easy, Medium, or Hard but there are many Easy problems with lower solve rates than many Hard problems. Not all problems accept solutions in all languages, and you can\u0026rsquo;t filter problems by which languages they accept. None of the graph problems on LeetCode accept Rust solutions, for example. LeetCode blocks \u0026ldquo;premium\u0026rdquo; problems behind a steep monthly paywall but doesn\u0026rsquo;t offer any kind of premium free-trial so there\u0026rsquo;s no telling if the quality is actually any better than the free problems.  Things LeetCode does right:\n Solutions to problems are tested against a suite of secret unit tests, but if you fail a particular test case they show you the failed case. All of the generated Rust code at least follows rustfmt conventions.  Codewars Codewars is a misleading name. There\u0026rsquo;s no war going on at Codewars. There\u0026rsquo;s no time limit to solve problems and your solutions aren\u0026rsquo;t judged on their speed of execution or memory usage. You aren\u0026rsquo;t in competition with anyone else. This isn\u0026rsquo;t a bad thing, just worth pointing out.\nRust is a supported language on Codewars. For every problem on Codewars you get a solution template which usually contains a single unimplemented function which you then have to implement and submit in order to solve the problem. These solution templates are created by humans, including humans who aren\u0026rsquo;t familiar with Rust, so you occasionally get some awkward and unidiomatic Rust. Examples:\n   Codewars\u0026rsquo; Rust Problems Idiomatic Rust     sometimes don\u0026rsquo;t follow rustfmt conventions, e.g. fn makeUppercase(s:\u0026amp;str)-\u0026gt;String always follows rustfmt conventions, e.g. fn make_uppercase(s: \u0026amp;str) -\u0026gt; String   sometimes takes signed integer arguments for problems that aren\u0026rsquo;t defined for negative integers, e.g. fn nth_fib(n: i32) -\u0026gt; i32 if a problem isn\u0026rsquo;t defined for negative integers use unsigned integer arguments, e.g. fn nth_fib(n: u32) -\u0026gt; u32   sometimes a problem asks you to return -1 for the null case, e.g. fn get_index(needle: i32, haystack: \u0026amp;[i32]) -\u0026gt; i32 if a result can be null the return type should be wrapped in an Option, e.g. fn get_index(needle: i32, haystack: \u0026amp;[i32]) -\u0026gt; Option\u0026lt;usize\u0026gt;   sometimes don\u0026rsquo;t take advantage of deref coercion, e.g. fn do_stuff(s: \u0026amp;String, list: \u0026amp;Vec\u0026lt;i32\u0026gt;) takes advantage of deref coercion, e.g. fn do_stuff(s: \u0026amp;str, list: \u0026amp;[i32])    All of the issues above only happen sometimes since there are Rustaceans of various skill-levels on Codewars translating problems to Rust. This is a huge step up from LeetCode where all of the generated Rust problem code is consistently unidiomatic. However, the Rust community on Codewars as a whole might lean towards the inexperienced side since I\u0026rsquo;ve seen some highly upvoted \u0026ldquo;idiomatic\u0026rdquo; solutions that were also a bit on the awkward side. Examples:\n   Codewars\u0026rsquo; highest upvoted Rust solutions Idiomatic Rust     sometimes use an explicit return at the end of a function block, e.g. return result; blocks are evaluated as expressions and implicitly return their last item, an explicit return at the end of a function block is unnecessary, e.g. result   often use compact formatting to make the solution look more concise should follow rustfmt conventions   sometimes make unnecessary allocations, e.g. str_slice.to_string().chars() if you don\u0026rsquo;t need to allocate then don\u0026rsquo;t, e.g. str_slice.chars()   often try to solve the problem using nothing but iterators at the cost of everything else iterators are expressive and idiomatic, but if you have to chain 15 of them in a row and there are multiple levels of nested iterators in-between then perhaps you should consider refactoring to use some helper functions, intermediate variables, and maybe even a for-loop    Again, the issues above only happen sometimes. An experienced Rustacean can spot them easily but there are a lot of Rust newbies on these sites who have no clue they are learning anti-patterns.\nOther Codewars issues, specific to Rust:\n Rust doesn\u0026rsquo;t seem that popular on Codewars, the site has 9000 exercises but only 300 of them have been translated to Rust ;(  Other general Codewars issues:\n Your solution is tested against a suite of secret unit tests, if you fail one of the secret unit tests you aren\u0026rsquo;t shown the failed test case. This is especially annoying if the test case tests for an edge case that wasn\u0026rsquo;t clearly communicated in the problem description.  Things Codewars does right:\n There\u0026rsquo;s a small whitelist of 3rd-party dependencies you can use to help solve problems with Rust. This whitelist includes: rand, chrono, regex, serde, itertools, and lazy_static which helps round out Rust\u0026rsquo;s standard library and puts it more on par with other languages. You can filter problems by language. Submitting a solution to a problem also automatically publishes the solution. You can view and upvote other members\u0026rsquo; solutions. You can sort solutions by most upvotes to see particularly concise and clever solutions, which sometimes will also be very idiomatic (but sometimes not, as explained above). Problem difficulty grading is pretty good! Instead of grading problems as Easy, Medium, or Hard like LeetCode, Codewars chooses to grade problems from easiest to hardest as: 8 kyu, 7 kyu, 6 kyu, 5 kyu, 4 kyu, 3 kyu, 2 kyu, 1 kyu. I completed 60 problems in the 8 kyu - 4 kyu range and every level felt a little more difficult than the last, which aligned with my expectations.  Advent of Code Advent of Code is totally language-agnostic. This would seem like a minus at first but seeing how horribly HackerRank, LeetCode, and Codewars handle their support for Rust on their sites it\u0026rsquo;s actually a plus. Advent of Code also gets placed above the previously mentioned sites because AoC\u0026rsquo;s exercises are really interesting, diverse, and high quality in my opinion.\nGeneral AoC issues:\n After you finish an exercise there\u0026rsquo;s no way to see other people\u0026rsquo;s Rust solutions unless you search from them on Google, and even after you find some there\u0026rsquo;s no telling how good or idiomatic they are.  To solve the above issue I recommend going through the 2018 Calendar problems and comparing your solutions to BurntSushi\u0026rsquo;s AoC 2018 Rust solutions. BurntSushi writes really clean, readable, idiomatic Rust code. If you want to go through the 2019 Calendar then I recommend comparing your solutions to bcmyers\u0026rsquo; AoC 2019 Rust solutions. The reason I specifically suggest bcmyers\u0026rsquo; is because he made a youtube playlist of him coding up the solutions and he does a great job of explaining his thought process and why he\u0026rsquo;s doing what he\u0026rsquo;s doing while he\u0026rsquo;s coding.\nThings AoC got right:\n High quality, interesting, curated exercises that are tied together with a narrative. Language agnostic, so while it doesn\u0026rsquo;t teach you any Rust patterns it at least doesn\u0026rsquo;t teach you any Rust anti-patterns either.  Rustlings Rustlings is sooo good. All Rustlings exercises are hand-crafted for Rust with love and it\u0026rsquo;s a wonderful breath of fresh air. Finally, a set of exercises that really teach you idiomatic Rust!\nIf you\u0026rsquo;re a total Rust newbie you should absolutely checkout Rustlings and get started on the exercises. I highly recommend reading fasterthanlime\u0026rsquo;s A half-hour to learn Rust first as it\u0026rsquo;ll get you up to speed on a lot of Rust syntax and concepts super quickly.\nI have only 1 tiny Rustlings criticism: there are some sudden difficulty spikes in the \u0026ldquo;error-handling\u0026rdquo; and \u0026ldquo;conversions\u0026rdquo; exercises that I could see some users getting overwhelmed by. I assume most probably make it through, or at least I hope.\nI also have 1 tiny non-criticism: it\u0026rsquo;s too short. This is a non-criticism because it\u0026rsquo;s one of Rustlings design goals to be a quick and gentle introduction to Rust but it\u0026rsquo;s so good that of course I wish it was somehow longer.\nExercism Exercism has a Rust track, which is a collection of exercises roughly ordered by subject and difficulty. The Rust track shares a lot of exercises in common with other tracks, but all of the exercises were translated to Rust by experienced Rustaceans and don\u0026rsquo;t suffer from any of the awkward unidiomatic Rust issues that are common on LeetCode and Codewars. There are about a dozen Rust-specific problems that require you to implement a standard library trait, or write a macro, or write a parallel solution using multiple threads, or write unsafe Rust code. These exercises are by far the highlights of the track and I wish there were more of them. Exercism is second only to Rustlings as a resource for learning Rust. The only reason I placed it above Rustlings is Rustlings can be completed in an evening and Exercism\u0026rsquo;s Rust track will take at least a month to complete so it just has a lot more content.\nExercism issues, specific to the Rust track:\n \u0026ldquo;Mentored mode\u0026rdquo; is useless, as most of the Rust mentors on the site are inactive, and the students heavily outnumber them, so it\u0026rsquo;s much better to go through a track in \u0026ldquo;practice mode\u0026rdquo;. There are 92 exercises but a good chunk of them don\u0026rsquo;t really teach you anything new so they kinda feel like busywork. They could probably cut ~20 exercises from the track to make it feel a lot tighter.  Things Exercism does right:\n All problems are translated to Rust or written for Rust by experienced Rustaceans. There are problems which specifically teach Rust\u0026rsquo;s idioms, design patterns, and unique features. Problem difficulties are fairly graded, easy problems are easy, medium problems are medium, hard problems are hard. You can include whatever 3rd-party dependencies that you want in your solutions. All unit tests are public, if you\u0026rsquo;re failing a test you know exactly why. After you submit a solution you can browse other user\u0026rsquo;s solutions, and you can sort solutions by which received the most stars.  Conclusion Same as the TL;DR :)\nDiscuss Discuss this article on\n learnrust subreddit official Rust users forum Twitter rust subreddit Hackernews Github  Notifications Get notified when the next article get published by\n Following pretzelhammer on Twitter or Subscribing to this repo\u0026rsquo;s release RSS feed or Watching this repo\u0026rsquo;s releases (click Watch -\u0026gt; click Custom -\u0026gt; select Releases -\u0026gt; click Apply)  Further Reading  Common Rust Lifetime Misconceptions Sizedness in Rust Tour of Rust\u0026rsquo;s Standard Library Traits RESTful API in Sync \u0026amp; Async Rust Learn Assembly with Entirely Too Many Brainfuck Compilers  ","permalink":"https://aimerneige.com/en/post/rust/re-learning-rust-in-2022/","summary":"This article are reproduce from pretzelhammer/rust-blog\n Intro When I started learning Rust I made the mistake of following the advice to read The Book first. While it\u0026rsquo;s a great resource, it\u0026rsquo;s pretty overwhelming for a beginner to get told \u0026ldquo;If you\u0026rsquo;d like to learn this programming language the best way to start is to read this 20 chapter book!\u0026rdquo; Most people give up before they even get started when they get advice like this.","title":"[Reproduce] Learning Rust in 2022"},{"content":"Install  Uninstall old wsa (if you have) make sure you have Virtual Machine Platform enabled on Turn Windows features on or off fork this repo: https://github.com/LSPosed/MagiskOnWSA build it with actions download build result run the install script start the wsa and enjoy it  Enable usb debug  Open wsa settings, enable Developer Mode copy wsa ip address adb connect WSA-IP-ADDRESS  ","permalink":"https://aimerneige.com/en/post/others/install-wsa-with-google-play-store-and-root/","summary":"Install  Uninstall old wsa (if you have) make sure you have Virtual Machine Platform enabled on Turn Windows features on or off fork this repo: https://github.com/LSPosed/MagiskOnWSA build it with actions download build result run the install script start the wsa and enjoy it  Enable usb debug  Open wsa settings, enable Developer Mode copy wsa ip address adb connect WSA-IP-ADDRESS  ","title":"Install WSA With Google Play Store and Root"},{"content":"Update system # Debian apt update # Fedora dnf update Install most used tools # Debain apt install -y neofetch htop tree ncdu ranger zsh vim neovim git curl wget lsd batcat # Fedora dnf install -y neofetch htop tree ncdu ranger zsh vim neovim git curl wget lsd bat Create sudo user # Debian adduser aimerneige usermod -aG sudo aimerneige # Fedora useradd -G wheel aimerneige passwd aimerneige Test root privileges su - aimerneige sudo cat /etc/shadow Setup SSH public key # run this on your local machine ssh-copy-id aimerneige@server Test if you can connect to server ssh aimerneige@server Disable root and password login sudo vim /etc/ssh/sshd_config  Set PermitRootLogin as no To disable root login Set PasswordAuthentication ad no To disable password login  Skip password for sudo sudo visudo Add this on the end of file:\naimerneige ALL=(ALL) NOPASSWD:ALL Delete other user that provider created sudo deluser default .notice{padding:18px;line-height:24px;margin-bottom:24px;border-radius:4px;color:#444;background:#e7f2fa}.notice p:last-child{margin-bottom:0}.notice-title{margin:-18px -18px 12px;padding:4px 18px;border-radius:4px 4px 0 0;font-weight:700;color:#fff;background:#6ab0de}.notice.warning .notice-title{background:rgba(217,83,79,.9)}.notice.warning{background:#fae2e2}.notice.info .notice-title{background:#f0b37e}.notice.info{background:#fff2db}.notice.note .notice-title{background:#6ab0de}.notice.note{background:#e7f2fA}.notice.tip .notice-title{background:rgba(92,184,92,.8)}.notice.tip{background:#e6f9e6}.icon-notice{display:inline-flex;align-self:center;margin-right:8px}.icon-notice img,.icon-notice svg{height:1em;width:1em;fill:currentColor}.icon-notice img,.icon-notice.baseline svg{top:0.125em;position:relative} Warning\nDo not delete the root user.\n Restart your server sudo reboot Other config Setup zsh config # Install oh-my-zsh sh -c \u0026#34;$(curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh)\u0026#34; # Update config from github (Use your own config file!!!!!) sh -c \u0026#34;$(curl -fsSL https://raw.githubusercontent.com/aimerneige/zsh/master/install.sh)\u0026#34; # Install zsh-autosuggestions git clone https://github.com/zsh-users/zsh-autosuggestions ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-autosuggestions # Install k git clone https://github.com/supercrabtree/k $ZSH_CUSTOM/plugins/k # Install starship curl -sS https://starship.rs/install.sh | sh Setup neovim config rm -rf ~/.config/nvim # Use your own config file!!!!! git clone git@github.com:aimerneige/nvim.git ~/.config/nvim Refer link  Best-practice for authentication after creating a new Linux server  ","permalink":"https://aimerneige.com/en/post/devops/how-to-setup-your-new-linux-server/","summary":"Update system # Debian apt update # Fedora dnf update Install most used tools # Debain apt install -y neofetch htop tree ncdu ranger zsh vim neovim git curl wget lsd batcat # Fedora dnf install -y neofetch htop tree ncdu ranger zsh vim neovim git curl wget lsd bat Create sudo user # Debian adduser aimerneige usermod -aG sudo aimerneige # Fedora useradd -G wheel aimerneige passwd aimerneige Test root privileges su - aimerneige sudo cat /etc/shadow Setup SSH public key # run this on your local machine ssh-copy-id aimerneige@server Test if you can connect to server ssh aimerneige@server Disable root and password login sudo vim /etc/ssh/sshd_config  Set PermitRootLogin as no To disable root login Set PasswordAuthentication ad no To disable password login  Skip password for sudo sudo visudo Add this on the end of file:","title":"How to Setup Your New Linux Server"},{"content":"Shell Comment Start with #\n# this is a line of comment Simply write more with # start\n# Author: Aimer Neige # Email: aimer.neige@aimerneige.com # Date: 2022-04-29 Other way:\n:\u0026lt;\u0026lt;EOF Author: Aimer Neige Email: aimer.neige@aimerneige.com Date: 2022-04-29 EOF :\u0026lt;\u0026lt;\u0026#39; Author: Aimer Neige Email: aimer.neige@aimerneige.com Date: 2022-04-29 \u0026#39; :\u0026lt;\u0026lt;! Author: Aimer Neige Email: aimer.neige@aimerneige.com Date: 2022-04-29 ! Refer Link  https://www.runoob.com/linux/linux-shell-variable.html  ","permalink":"https://aimerneige.com/en/post/shell/shell-learning-notes-comment/","summary":"Shell Comment Start with #\n# this is a line of comment Simply write more with # start\n# Author: Aimer Neige # Email: aimer.neige@aimerneige.com # Date: 2022-04-29 Other way:\n:\u0026lt;\u0026lt;EOF Author: Aimer Neige Email: aimer.neige@aimerneige.com Date: 2022-04-29 EOF :\u0026lt;\u0026lt;\u0026#39; Author: Aimer Neige Email: aimer.neige@aimerneige.com Date: 2022-04-29 \u0026#39; :\u0026lt;\u0026lt;! Author: Aimer Neige Email: aimer.neige@aimerneige.com Date: 2022-04-29 ! Refer Link  https://www.runoob.com/linux/linux-shell-variable.html  ","title":"Shell Learning Notes Comment"},{"content":"Pass Parameters When you are running a shell script and you want to pass some parameters into the script, you can get the parameters by $n.\nThe n represents a number, the 1 is meant for the first parameters you pass to the script, the 2 is the second parameters you pass to the script, and so on.\nNote that the 0 is the script fine name.\nExample:\n#!/usr/bin/bash  echo \u0026#34;Parameters Example:\u0026#34; echo \u0026#34;The Script File Name: \\\u0026#34;$0\\\u0026#34;\u0026#34; echo \u0026#34;The First Parameters: \\\u0026#34;$1\\\u0026#34;\u0026#34; echo \u0026#34;The Second Parameters: \\\u0026#34;$2\\\u0026#34;\u0026#34; echo \u0026#34;The Third Parameters: \\\u0026#34;$3\\\u0026#34;\u0026#34; echo \u0026#34;The Forth Parameters: \\\u0026#34;$4\\\u0026#34;\u0026#34; Run this script:\n➜ ./test.sh first second third fourth Parameters Example: The Script File Name: \u0026#34;./test.sh\u0026#34; The First Parameters: \u0026#34;first\u0026#34; The Second Parameters: \u0026#34;second\u0026#34; The Third Parameters: \u0026#34;third\u0026#34; The Forth Parameters: \u0026#34;fourth\u0026#34; Some special characters to solve the parameters:\n   args explanation     $# The number of arguments passed to the script.   $* Displays all parameters passed to the script as a single string.   $$ The current process ID number of the script running.   $! ID number of the last process running in the background.   $@ Same as $*, but returns each argument as in array.   $- Displays the current options used by the shell, which has the same function as the set command.   $? Displays the exit status of the last command. 0 means no error, any other value means there is an error.    Example:\n#!/usr/bin/bash  echo \u0026#34;Parameters Example:\u0026#34; echo \u0026#34;The Script File Name: \\\u0026#34;$0\\\u0026#34;\u0026#34; echo \u0026#34;The Number of Parameters: $#\u0026#34; echo \u0026#34;All Parameters: \\\u0026#34;$*\\\u0026#34;\u0026#34; echo \u0026#34;Script PID: $$\u0026#34; Run this script:\n➜ ./test.sh first second third fourth fifth Parameters Example: The Script File Name: \u0026#34;./test.sh\u0026#34; The Number of Parameters: 5 All Parameters: \u0026#34;first second third fourth fifth\u0026#34; Script PID: 25504 Different between $* and $@:\n $* return one args, which means 1 2 3 as a single string. $@ return array of args, which means 1 2 3 as a array.  Example:\n#!/usr/bin/bash  echo \u0026#34;-- Example For \\$* ---\u0026#34; for i in \u0026#34;$*\u0026#34;; do  echo $i done  echo \u0026#34;-- Example For \\$@ ---\u0026#34; for i in \u0026#34;$@\u0026#34;; do  echo $i done Run this script:\n➜ ./test.sh first second third fourth fifth -- Example For $* --- first second third fourth fifth -- Example For $@ --- first second third fourth fifth Refer Link  https://www.runoob.com/linux/linux-shell-passing-arguments.html  ","permalink":"https://aimerneige.com/en/post/shell/shell-learning-notes-parameters/","summary":"Pass Parameters When you are running a shell script and you want to pass some parameters into the script, you can get the parameters by $n.\nThe n represents a number, the 1 is meant for the first parameters you pass to the script, the 2 is the second parameters you pass to the script, and so on.\nNote that the 0 is the script fine name.\nExample:\n#!/usr/bin/bash  echo \u0026#34;Parameters Example:\u0026#34; echo \u0026#34;The Script File Name: \\\u0026#34;$0\\\u0026#34;\u0026#34; echo \u0026#34;The First Parameters: \\\u0026#34;$1\\\u0026#34;\u0026#34; echo \u0026#34;The Second Parameters: \\\u0026#34;$2\\\u0026#34;\u0026#34; echo \u0026#34;The Third Parameters: \\\u0026#34;$3\\\u0026#34;\u0026#34; echo \u0026#34;The Forth Parameters: \\\u0026#34;$4\\\u0026#34;\u0026#34; Run this script:","title":"Shell Learning Notes Parameters"},{"content":"Shell Variable Define Variable You are not allowed to add $ when defining a variable, while in php, you need it.\nFor example:\nyour_name=\u0026#34;Aimer Neige\u0026#34; Like other programming languages, you need to follow these rules:\n You can only use letters, numbers, and underscores, and the first character can not be numbers. You are not allowed to add space, use underscores _ replace. You are not allowed to use special characters. You can not use any keywords used by bash.  For example, right variable names:\nRUNOOB LD_LIBRARY_PATH _var var2 Wrong variable names:\n?var=123 user*name=runoob Except assign a variable with =, a statement is also right. For example:\nfor file in `ls /etc` # or for file in $(ls /etc) Note that no spaces can be added to the sides of the equals sign.\n# right FOO=\u0026#34;Hello\u0026#34; echo $BAR  # wrong BAR = \u0026#34;Hello\u0026#34; echo $BAR Access Variable If you want to use a variable, add $ before the variable name:\nyour_name=\u0026#34;Alice\u0026#34; echo $your_name echo ${your_name} The {} can be ignored, but still recommend you add it. That is because when you are faced with this situation:\nfor skill in Ada Coffee Action Java; do  echo \u0026#34;I am good at ${skill}Script\u0026#34; done If you ignore the {}, the script will think you want to access a variable named skillScript, which will cause some problems.\nAll of the variables you defined can be redefined:\nyour_name=\u0026#34;Tom\u0026#34; echo $your_name your_name=\u0026#34;Jack\u0026#34; echo $your_name Write a script in this way are right but note that if you assign a variable the second time, do not use $ because the $ only be used when you want to access it.\nRead-only Variable Using thereadonly  command can make a variable read-only.\n#!/bin/bash  myUrl=\u0026#34;https://www.google.com\u0026#34; readonly myUrl myUrl=\u0026#34;https://aimerneige.com\u0026#34; If you run this script, you will get this error output:\n./test.sh: line 5: myUrl: readonly variable Delete Variable You can delete a variable with unset.\nunset variable_name Variable can not be accessed after being deleted. Note that unset can not delete a read-only variable.\nFor example:\n#!/bin/sh  myUrl=\u0026#34;https://aimerneige.com\u0026#34; unset myUrl echo $myUrl If you run this script, you will get noting for output.\nVariable Type  local variable: Define in a shell script, only available in the script. environment variable: Define in the system environment, can be accessed by all of the program and shell scripts. shell variable: Define in shell program, some of them are local variables and some of them are environment variables. These variables make sure the shell runs properly.  Shell String The string is the most used data structure. You can define a string with a single quote ', double quotes \u0026quot; or without quotation marks.\nsingle-quoted string str=\u0026#39;this is a string\u0026#39; Limitations of single-quoted strings:\n Any character in single quotes will be output as is, variables in single quoted strings are invalid; A single quote cannot appear in a single quote string (even after using an escape character for a single quote), but it can appear in pairs and be used as string concatenation.  Enclosing characters in single quotation marks (‘) holds onto the literal value of each character within the quotes. In simpler words, the shell will interpret the enclosed text within single quotes literally and will not interpolate anything including variables, backticks, certain \\ escapes, etc. No character in the single quote has special meaning. This is convenient when you do not want to use the escape characters to change the way the bash interprets the input string.double-quoted string Example:\nyour_name=\u0026#34;runoob\u0026#34; str=\u0026#34;Hello, I know you are \\\u0026#34;$your_name\\\u0026#34;! \\n\u0026#34; echo -e $str Example output:\nHello, I know you are \u0026#34;runoob\u0026#34;! Advantage of double-quoted string:\n Variables can be enclosed in double quotes Escape characters can appear in double quotes  Double quotes are similar to single quotes except that it allows the shell to interpret dollar sign ($), backtick(`), backslash() and exclamation mark(!). The characters have special meaning when used with double quotes, and before display, they are evaluated. A double quote may be used within double quotes by preceding it with a backslash.\nstring concatenation Example:\nyour_name=\u0026#34;runoob\u0026#34; # double-quoted string greeting=\u0026#34;hello, \u0026#34;$your_name\u0026#34; !\u0026#34; greeting_1=\u0026#34;hello, ${your_name}!\u0026#34; echo $greeting $greeting_1  # single-quoted string greeting_2=\u0026#39;hello, \u0026#39;$your_name\u0026#39; !\u0026#39; greeting_3=\u0026#39;hello, ${your_name} !\u0026#39; echo $greeting_2 $greeting_3 Example output:\nhello, runoob ! hello, runoob ! hello, runoob ! hello, ${your_name} ! length of string string=\u0026#34;abcd\u0026#34; echo ${#string} # output: 4 If the variable are array, ${#string} is equivalent to ${#string[0]}.\nFor Example:\nstring=\u0026#34;abcd\u0026#34; echo ${#string[0]} # output: 4 extract substring Assume there is a variable var=http://www.aaa.com/123.htm.\n# operator, delete left characters, keep right characters echo ${var#*//} Where var is the variable name, the # sign is the operator, and *// means to delete the first //sign from the left and all characters on the left from the left.\nIn the example, delete http:// and we got www.aaa.com/123.htm.\n## operator, delete left characters, keep right characters echo ${var##*/} ##*/ means to delete the last (rightmost) / sign from the left and all characters to the left from it.\nIn the example, delete http://www.aaa.com/ and we got 123.htm\n% operator, delete right characters, keep left characters echo ${var%/*} %/* means to delete the first / sign from the right and the characters to the right from it.\nIn the example, delete /123.htm and we got http://www.aaa.com.\n%% operator, delete right characters, keep left characters echo ${var%%/*} %%/* means to delete the last (leftmost) / sign from the right and all characters to the right from it.\nIn the example, delete //www.aaa.com/123.htm and we got http:.\nfrom left index with character counts echo ${var:0:5} Where 0 means start from the first character from left, and 5 means the total number of characters.\nIn the example, we got http:.\nfrom left index to end echo ${var:7} The 7 means start from the 8th character from left and till the end.\nIn the example, we got www.aaa.com/123.htm.\nfrom right index with character counts echo ${var:0-7:3} Where 0-7 means start from the 7th character from right, and the 3 means the total number of characters.\nIn the example, we got 123.\nfrom left index to start echo ${var:0-7} The 0-7 means start from the 7th character from right and till the end.\nIn the example, we got 123.htm.\nNote: The index of the first character are 0.\nSearch String Find the position of the character i or o (whichever occurs first is counted)\nstring=\u0026#34;runoob is a great site\u0026#34; echo `expr index \u0026#34;$string\u0026#34; io` # output 4  More about expr command:\n https://cheat.sh/expr https://www.geeksforgeeks.org/expr-command-in-linux-with-examples/   Shell Array You can use one-dimensional array in bash. (bash does not support multidimensional arrays)\nThere is no limit to the size of the array.\nSimilar to the C programming language, the elements of the array start to index with 0.\ndefine array Define an array with brackets (), and separate all of the elements with space.\nFor example:\narray_name=(value0 value1 value2 value3) array_name=( value0 value1 value2 value3 ) array_name[0]=value0 array_name[1]=value1 array_name[2]=value2 array_name[3]=value3 array_name[0]=value0 array_name[114514]=value114514 Subscripts can be no-continuous and the range is without any limit.\naccess array Access elements by:\nvalue=${array_name[3]} Use @ or * to access all of the elements:\necho ${array_name[@]} echo ${array_name[*]} get array length Similar to string:\n# Get the number of array elements length=${#array_name[@]} # or length=${#array_name[*]} # Get the length of a single element of an array length=${#array_name[3]} Refer Link  https://www.runoob.com/linux/linux-shell-variable.html https://www.geeksforgeeks.org/difference-between-single-and-double-quotes-in-shell-script-and-linux/  ","permalink":"https://aimerneige.com/en/post/shell/shell-learning-notes-variable/","summary":"Shell Variable Define Variable You are not allowed to add $ when defining a variable, while in php, you need it.\nFor example:\nyour_name=\u0026#34;Aimer Neige\u0026#34; Like other programming languages, you need to follow these rules:\n You can only use letters, numbers, and underscores, and the first character can not be numbers. You are not allowed to add space, use underscores _ replace. You are not allowed to use special characters.","title":"Shell Learning Notes Variable"},{"content":"Adding Swagger to Spring Boot  Getting the Swagger Spring dependency Enabling Swagger in your code Configuring Swagger Adding details as annotations to APIs  Getting the Swagger Spring dependency Edit build.gradle\nplugins { id \u0026#39;org.springframework.boot\u0026#39; version \u0026#39;2.5.2\u0026#39; ... } ... dependencies { implementation \u0026#34;io.springfox:springfox-boot-starter:3.0.0\u0026#34; ... } Enabling Swagger in your code Add @EnableSwagger2 to SpringBootApplication\nConfiguring Swagger Create SwaggerConfig class.\npackage com.aimerneige.example.config;  import org.springframework.context.annotation.Bean; import org.springframework.context.annotation.Configuration;  import springfox.documentation.builders.ApiInfoBuilder; import springfox.documentation.builders.PathSelectors; import springfox.documentation.builders.RequestHandlerSelectors; import springfox.documentation.service.ApiInfo; import springfox.documentation.spi.DocumentationType; import springfox.documentation.spring.web.plugins.Docket; import springfox.documentation.swagger2.annotations.EnableSwagger2;  @Configuration @EnableSwagger2 public class SwaggerConfig {   @Bean  public Docket apiDocket() {  return new Docket(DocumentationType.SWAGGER_2)  .apiInfo(apiInfo())  .select()  .apis(RequestHandlerSelectors.basePackage(\u0026#34;com.aimerneige.example.controller\u0026#34;))  .paths(PathSelectors.any())  .build();  }   private ApiInfo apiInfo() {  return new ApiInfoBuilder()  .title(\u0026#34;Example API\u0026#34;)  .version(\u0026#34;1.0\u0026#34;)  .build();  } } Adding details as annotations to APIs Add annotation to your controller.\n","permalink":"https://aimerneige.com/en/post/java/enable-swagger-on-spring-boot-gradle-projects/","summary":"Adding Swagger to Spring Boot  Getting the Swagger Spring dependency Enabling Swagger in your code Configuring Swagger Adding details as annotations to APIs  Getting the Swagger Spring dependency Edit build.gradle\nplugins { id \u0026#39;org.springframework.boot\u0026#39; version \u0026#39;2.5.2\u0026#39; ... } ... dependencies { implementation \u0026#34;io.springfox:springfox-boot-starter:3.0.0\u0026#34; ... } Enabling Swagger in your code Add @EnableSwagger2 to SpringBootApplication\nConfiguring Swagger Create SwaggerConfig class.\npackage com.aimerneige.example.config;  import org.springframework.context.annotation.Bean; import org.springframework.context.annotation.Configuration;  import springfox.","title":"Enable Swagger on Spring Boot Gradle Projects"},{"content":"Before Start It’s been a long time since I wrote a blog post last time. That\u0026rsquo;s because I often reinstall my system on computer, and every time I install and configure the blog of hexo on my computer is a troublesome thing. But recently, I discovered hugo, a simple and easy-to-use blog system, which can keep me away from hexo, which is slow and troublesome to configure and install. It has a great experience to use and I happened to change a blog theme, so I decided to use hugo to build my new blog. This article briefly introduces how to install and use hugo.\nInstall You may need  golang git text editor you love  You must needn\u0026rsquo;t  nodejs npm  Install hugo Install hugo is very simple. Take fedora system as an example, simply run this command:\nsudo dnf install hugo Create Site Directory Create your site directory with this command:\nhugo new site blog Change to work directory:\ncd blog Use git for version control:\ngit init Install Theme Pick up your favorite theme, clone it into ./themes directory directly.\ngit clone https://github.com/adityatelange/hugo-PaperMod themes/PaperMod --depth=1  Use --depth=1 to ignore the commit history.\n Of course, you can download a zip file and unzip it.\nIf you wants to make version control more convenient and update more easily, use this command to add submodule:\ngit submodule add https://github.com/adityatelange/hugo-PaperMod.git themes/PaperMod --depth=1 Clone submodules when reclone repo:\ngit submodule update --init --recursive Update theme:\ngit submodule update --remote --merge Config hugo support many config file format. The yaml file is more readable, so in the next article we will use yaml.\nDifferent from hexo, you have only one config file, just follow you theme\u0026rsquo;s doc and edit config file.\nApply Theme theme: \u0026#34;PaperMod\u0026#34; Edit Theme Config Different thems has different way to config, please follow your theme\u0026rsquo;s doc.\nFollow config for reference:\nbaseURL: \u0026#34;https://aimerneige.com/\u0026#34; languageCode: \u0026#34;en-us\u0026#34; title: \u0026#34;AimerNeige\u0026#39;s Blog\u0026#34; theme: \u0026#34;PaperMod\u0026#34;  enableRobotsTXT: true buildDrafts: false buildFuture: false buildExpired: false  defaultContentLanguage: en defaultContentLanguageInSubdir: true  languages:  en:  languageName: \u0026#34;English\u0026#34;  weight: 1  menu:  main:  - name: About  url: about/  weight: 5  - name: Friends  url: friends/  weight: 6  - name: Post  url: post/  weight: 7  - name: Archive  url: archives/  weight: 8  - name: Tags  url: tags/  weight: 9  - name: Categories  url: categories/  weight: 10  - name: Search  url: search/  weight: 11  zh:  languageName: \u0026#34;中文\u0026#34;  weight: 2  menu:  main:  - name: 关于  url: about/  weight: 5  - name: 朋友  url: friends/  weight: 6  - name: 文章  url: post/  weight: 7  - name: 归档  url: archives/  weight: 8  - name: 标签  url: tags/  weight: 9  - name: 分类  url: categories/  weight: 10  - name: 搜索  url: search/  weight: 11  params:  profileMode:  enabled: true  title: \u0026#34;Aimer Neige\u0026#34;  subtitle: \u0026#34;技术宅拯救世界\u0026#34;  imageUrl: \u0026#34;https://avatars.githubusercontent.com/u/51701792?v=4\u0026#34;  imageTitle: \u0026#34;avatar.jpeg\u0026#34;  imageWidth: 140  imageHeight: 140  params:  env: production  keywords: [Blog, OpenSource, Coding, Golang, Programming]  author: \u0026#34;Aimer Neige\u0026#34;  defaultTheme: auto  disableThemeToggle: false   ShowToc: true  TocOpen: false  ShowBreadCrumbs: true  ShowReadingTime: false  ShowPostNavLinks: true  ShowShareButtons: false  ShowCodeCopyButtons: true  displayFullLangName: true   editPost:  URL: \u0026#34;https://github.com/aimerneige/blog/content\u0026#34;  Text: \u0026#34;Suggest Changes\u0026#34;  appendFilePath: true   homeInfoParams:  Title: \u0026#34;Aimer Neige\u0026#34;  Content: \u0026#34;Tech Otakus Save The World\u0026#34;   profileMode:  enabled: true  title: \u0026#34;Aimer Neige\u0026#34;  subtitle: \u0026#34;Tech Otakus Save The World\u0026#34;  imageUrl: \u0026#34;https://avatars.githubusercontent.com/u/51701792?v=4\u0026#34;  imageTitle: \u0026#34;avatar.jpeg\u0026#34;  imageWidth: 140  imageHeight: 140   socialIcons:  - name: github  url: \u0026#34;https://github.com/AimerNeige\u0026#34;  - name: twitter  url: \u0026#34;https://twitter.com/NeigeAimer\u0026#34;  - name: steam  url: \u0026#34;https://steamcommunity.com/id/AimerNeige\u0026#34;  - name: Telegram  url: \u0026#34;https://t.me/AimerNeige\u0026#34;  - name: KoFi  url: \u0026#34;https://ko-fi.com/aimerneige\u0026#34;  - name: RsS  url: \u0026#34;index.xml\u0026#34;  taxonomies:  category: categories  tag: tags  series: series  outputs:  home:  - HTML  - RSS  - JSON Migrate Copy your markdown file to new site directory and edit config.\nTest Use this command to run a local test server:\nhugo serve -D Deploy Generate static file with this command:\nhugo Then public it to github:\ncd public git add -A git commit -m \u0026#34;commit message\u0026#34; git push ","permalink":"https://aimerneige.com/en/post/others/hello-hugo/","summary":"Before Start It’s been a long time since I wrote a blog post last time. That\u0026rsquo;s because I often reinstall my system on computer, and every time I install and configure the blog of hexo on my computer is a troublesome thing. But recently, I discovered hugo, a simple and easy-to-use blog system, which can keep me away from hexo, which is slow and troublesome to configure and install. It has a great experience to use and I happened to change a blog theme, so I decided to use hugo to build my new blog.","title":"Hello Hugo"},{"content":" https://leetcode.com/problems/pyramid-transition-matrix/\n  We are stacking blocks to form a pyramid. Each block has a color which is a one letter string.\nWe are allowed to place any color block C on top of two adjacent blocks of colors A and B, if and only if ABC is an allowed triple.\nWe start with a bottom row of bottom, represented as a single string. We also start with a list of allowed triples allowed. Each allowed triple is represented as a string of length 3.\nReturn true if we can build the pyramid all the way to the top, otherwise false.\nExample 1:\nInput: bottom = \u0026#34;BCD\u0026#34;, allowed = [\u0026#34;BCG\u0026#34;, \u0026#34;CDE\u0026#34;, \u0026#34;GEA\u0026#34;, \u0026#34;FFF\u0026#34;] Output: true Explanation: We can stack the pyramid like this: A / \\ G E / \\ / \\ B C D We are allowed to place G on top of B and C because BCG is an allowed triple. Similarly, we can place E on top of C and D, then A on top of G and E. Example 2:\nInput: bottom = \u0026#34;AABA\u0026#34;, allowed = [\u0026#34;AAA\u0026#34;, \u0026#34;AAB\u0026#34;, \u0026#34;ABA\u0026#34;, \u0026#34;ABB\u0026#34;, \u0026#34;BAC\u0026#34;]: Output: false Explanation: We can\u0026#39;t stack the pyramid to the top. Note that there could be allowed triples (A, B, C) and (A, B, D) with C != D.... Constraints:\n bottom will be a string with length in range [2, 8]. allowed will have length in range [0, 200]. Letters in all strings will be chosen from the set {'A', 'B', 'C', 'D', 'E', 'F', 'G'}.   class Solution {  Map\u0026lt;String, List\u0026lt;String\u0026gt;\u0026gt; map;   public boolean pyramidTransition(String bottom, List\u0026lt;String\u0026gt; allowed) {  map = new HashMap\u0026lt;\u0026gt;();  for(String s : allowed) {  String key = s.substring(0, 2);  String value = s.substring(2, 3);  map.putIfAbsent(key, new ArrayList\u0026lt;\u0026gt;());  map.get(key).add(value);  }  return solve(bottom);  }   private boolean solve(String bottom) {  if(bottom.length() == 1) {  return true;  }  List\u0026lt;String\u0026gt; nextBottoms = new ArrayList\u0026lt;\u0026gt;();  generateNextBottoms(bottom, nextBottoms, \u0026#34;\u0026#34;, 0);  for(String next : nextBottoms) {  if(solve(next)) {  return true;  }  }  return false;  }   private void generateNextBottoms(String bottom, List\u0026lt;String\u0026gt; res, String cur, int i) {  if(cur.length() == bottom.length() - 1) {  res.add(cur);  return;  }  String key = bottom.substring(i, i + 2);  if(!map.containsKey(key)) {  return;  }  List\u0026lt;String\u0026gt; values = map.get(key);  for(String c : values) {  generateNextBottoms(bottom, res, cur + c, i + 1);  }  } } ","permalink":"https://aimerneige.com/en/post/leetcode/leetcode-pyramid-transition-matrix/","summary":"https://leetcode.com/problems/pyramid-transition-matrix/\n  We are stacking blocks to form a pyramid. Each block has a color which is a one letter string.\nWe are allowed to place any color block C on top of two adjacent blocks of colors A and B, if and only if ABC is an allowed triple.\nWe start with a bottom row of bottom, represented as a single string. We also start with a list of allowed triples allowed.","title":"LeetCode Pyramid Transition Matrix"},{"content":" In this example, I am using Material Design. But you can also use the Theme.AppCompat.DayNight.\nThis is a simple way to adapt a dark mode, if you wants more, check for GitHub or Internet.\n Change the style First you should use the DayNight style by Google.\n\u0026lt;style name=\u0026#34;AppTheme\u0026#34; parent=\u0026#34;Theme.MaterialComponents.DayNight\u0026#34;\u0026gt; If you want to let things easily, that\u0026rsquo;s enough. But you can also provide more adaptation.\nAdapt colors Make a new folder at project/app/src/main/res/values-night then make a new resource file colors.xml. Edit the color you want to set on dark mode.\nFor example, you want to let the color of colorPrimary black on dark mode which is green on default.\nOn your values/colors.xml, you have this lien to mak the colorPrimary green.\n\u0026lt;!-- on file values/colors.xml --\u0026gt; \u0026lt;color name=\u0026#34;colorPrimary\u0026#34;\u0026gt;#3DDC84\u0026lt;/color\u0026gt; You just add a new line on values-night/colors.xml like this.\n\u0026lt;!-- on file values-night/colors.xml --\u0026gt; \u0026lt;color name=\u0026#34;colorPrimary\u0026#34;\u0026gt;#000000\u0026lt;/color\u0026gt; Then the AndroidStudio will understand what you have done and usr the #000000 when on night mode and use #3DDC84 on default.\nBut if you have these color resource on values/colors.xml which is not used for theme, just let them in, you need to add them to values-night/colors.xml.\n\u0026lt;!-- Common --\u0026gt; \u0026lt;color name=\u0026#34;white\u0026#34;\u0026gt;#FFFFFF\u0026lt;/color\u0026gt; \u0026lt;color name=\u0026#34;black\u0026#34;\u0026gt;#000000\u0026lt;/color\u0026gt; \u0026lt;color name=\u0026#34;red\u0026#34;\u0026gt;#FF0000\u0026lt;/color\u0026gt; \u0026lt;color name=\u0026#34;green\u0026#34;\u0026gt;#008000\u0026lt;/color\u0026gt; \u0026lt;color name=\u0026#34;blue\u0026#34;\u0026gt;#0000FF\u0026lt;/color\u0026gt; \u0026lt;color name=\u0026#34;yellow\u0026#34;\u0026gt;#FFFF00\u0026lt;/color\u0026gt; \u0026lt;color name=\u0026#34;teal\u0026#34;\u0026gt;#008080\u0026lt;/color\u0026gt; \u0026lt;color name=\u0026#34;Orange\u0026#34;\u0026gt;#FFA500\u0026lt;/color\u0026gt; So, If you want to change the color on night mode, just add it on values-night/colors.xml. AndroidStudio will use colors in values/colors.xml on default and use colors in values-night/colors.xml when in dark mode.\nAdapt themes Like what I write on Adapt colors, just add a themes.xml on folder project/app/src/main/res/values-night.\n","permalink":"https://aimerneige.com/en/post/android/dark-mode-on-android/","summary":"In this example, I am using Material Design. But you can also use the Theme.AppCompat.DayNight.\nThis is a simple way to adapt a dark mode, if you wants more, check for GitHub or Internet.\n Change the style First you should use the DayNight style by Google.\n\u0026lt;style name=\u0026#34;AppTheme\u0026#34; parent=\u0026#34;Theme.MaterialComponents.DayNight\u0026#34;\u0026gt; If you want to let things easily, that\u0026rsquo;s enough. But you can also provide more adaptation.\nAdapt colors Make a new folder at project/app/src/main/res/values-night then make a new resource file colors.","title":"Dark Mode on Android"},{"content":"Welcome Welcome!\nHelloWorld This is a simple test for my first blog article.\nMathjax  Test 1  $$a_{PI}(x|D) = E[u(x) | x, D] = \\int_{-\\infty}^{f\u0026rsquo;} \\mathcal{N}(f; \\mu(x), \\kappa(x, x)) \\ df =\\phi(f\u0026rsquo;; \\mu(x), \\kappa(x, x))$$\n Test 2  $$\\frac{e}{\\left( e+e^{\\pi} - \\pi^{e}\\right) ,\\left( - e+\\pi^{e}\\right) }+{E(\\left( e+\\pi\\right) ,\\left( 2,e+\\pi\\right) )}^{e}$$\nC #include \u0026lt;stdio.h\u0026gt;int main() {  printf(\u0026#34;HelloWorld!\\n\u0026#34;);  return 0; } C++ #include \u0026lt;iostream\u0026gt;int main() {  std::cout \u0026lt;\u0026lt; \u0026#34;HelloWorld!\u0026#34; \u0026lt;\u0026lt; std::endl;  return 0; } Java public class Main {  public static void main(String[] args) {  System.out.println(\u0026#34;HelloWorld!\u0026#34;);  } } Python print(\u0026#34;HelloWorld!\u0026#34;) Go package main  import \u0026#34;fmt\u0026#34;  func main() {  fmt.Println(\u0026#34;HelloWorld!\u0026#34;) } Hidden Text .heimu {color: black;background-color: black;}.heimu:hover {color: white;} Hidden Text  ","permalink":"https://aimerneige.com/en/post/others/hello-world/","summary":"Welcome Welcome!\nHelloWorld This is a simple test for my first blog article.\nMathjax  Test 1  $$a_{PI}(x|D) = E[u(x) | x, D] = \\int_{-\\infty}^{f\u0026rsquo;} \\mathcal{N}(f; \\mu(x), \\kappa(x, x)) \\ df =\\phi(f\u0026rsquo;; \\mu(x), \\kappa(x, x))$$\n Test 2  $$\\frac{e}{\\left( e+e^{\\pi} - \\pi^{e}\\right) ,\\left( - e+\\pi^{e}\\right) }+{E(\\left( e+\\pi\\right) ,\\left( 2,e+\\pi\\right) )}^{e}$$\nC #include \u0026lt;stdio.h\u0026gt;int main() {  printf(\u0026#34;HelloWorld!\\n\u0026#34;);  return 0; } C++ #include \u0026lt;iostream\u0026gt;int main() {  std::cout \u0026lt;\u0026lt; \u0026#34;HelloWorld!","title":"Hello World"},{"content":" A Student from the North University of China Learning IoT. Linux user, love open source and share.\n Skills  Languages, software and services used\n  golang python JavaScript Linux git mysql  Tools  neovim VSCode VirtualBox Dbeaver Inkdrop Spotify  Language  Chinese English  Education  North University of China Ningwu Senior High School Ningwu No.1 Middle School  Contact Me GitHub: https://github.com/AimerNeige/\nEmail: aimer.neige@aimerneige.com\nTelegram: @AimerNeige\nMy Domain: aimerneige.com\nMy Hometown ","permalink":"https://aimerneige.com/en/about/","summary":"A Student from the North University of China Learning IoT. Linux user, love open source and share.\n Skills  Languages, software and services used\n  golang python JavaScript Linux git mysql  Tools  neovim VSCode VirtualBox Dbeaver Inkdrop Spotify  Language  Chinese English  Education  North University of China Ningwu Senior High School Ningwu No.1 Middle School  Contact Me GitHub: https://github.com/AimerNeige/\nEmail: aimer.neige@aimerneige.com","title":"About Me 👨‍💻"},{"content":"Not listed in order. Sort by time added.\n.friends { padding: 1em 0; border: 2px solid transparent; border-bottom: 1px dashed var(--color-contrast-low); display: flex; transition: all .5s; } .friends .friend { text-decoration: none; text-overflow: ellipsis; overflow: hidden; white-space: nowrap; } .friends .name { font-weight: bold; margin: 0.375em 0; } .friends .excerpt { font-size: 0.875em; text-overflow: ellipsis; overflow: hidden; white-space: nowrap; } .friends .avatar { width: 4em !important; height: 4em !important; margin: 0 1em 0 0 !important; z-index: 0; }  伞 一只咸鱼的学习记录    HelloWorld的小博客 这里是一个小白的博客    TangZ TangZ 的个人页面    Kenvix 党明学姐    HeoLis We need to go faster and deeper.    🔨 🔨のBlog    异国迷宫的十字路口 一位弱鸡带学生的个人博客    Gaein nidb Gaein nidb的网站    fzf404 fzf的网站    凛凛酱 傻逼凛凛    Web-Worker 道阻且长,行则将至。    vritser 半斤八两    Anduin Xue Software engineer at 𝙈𝙞𝙘𝙧𝙤𝙨𝙤𝙛𝙩.    Holk AI researcher    喵雨の小屋 努力学习中…    ","permalink":"https://aimerneige.com/en/friends/","summary":"Not listed in order. Sort by time added.\n.friends { padding: 1em 0; border: 2px solid transparent; border-bottom: 1px dashed var(--color-contrast-low); display: flex; transition: all .5s; } .friends .friend { text-decoration: none; text-overflow: ellipsis; overflow: hidden; white-space: nowrap; } .friends .name { font-weight: bold; margin: 0.375em 0; } .friends .excerpt { font-size: 0.875em; text-overflow: ellipsis; overflow: hidden; white-space: nowrap; } .friends .avatar { width: 4em !important; height: 4em !important; margin: 0 1em 0 0 !","title":"Friends 🧑‍🤝‍🧑"},{"content":"This page showcases a list of open source projects developed or participated by me over the period of time.\nDDLC-Plus-Asset-Decrypter 「心跳文学部 Plus」资源文件解密器。\nMiraiChess 使用 MiraiGo-Template 实现的国际象棋机器人。可以在群内下棋，同时支持 elo 等级分计算。\nyukichan-bot-module 一系列 MiraiGo-Template 插件。\nblog 技术博客，就是你现在正在访问的站点。\nGoWebHooks Golang 实现的 WebHooks 部署脚本。简单且轻量化地实现自动化部署。\ni3status i3status 配置文件。\nmarkdowntutorial.com 一个学习 markdown 的网站。贡献了部分中文翻译。\nMusic-Player-GO 一个音乐播放器。贡献了部分中文翻译。\nhugo-theme-heimu 在 hugo 内使用黑幕。.heimu {color: black;background-color: black;}.heimu:hover {color: white;} 就是这个样子 muzei_coolapk 酷安酷图的 muzei 壁纸源插件。图片质量还是可以的。\nSurfingTutorial 给中国新大学生的网上冲浪和计算机使用教程。\nGlowSans-Ubuntu-Magisk 自己用的 Magisk 字体模块。\nEdibleFlowers 之前的一个比赛项目，没什么好说的。\nCourseEvaluation 大学评课系统，JavaEE/数据库 课程设计。\nCourseEvaluationClient 大学评课系统客户端，JavaEE/数据库 课程设计。\nRFIDAndroid rfid 课程设计移动端代码。主要是蓝牙串口通讯。\nboxes 推箱子，程序设计基础课程设计。\nrecords-of-Jing 这个好像不能解释太多（逃\njiwang 计网复习资料，祝大家都不挂科。\nmayuan 马原复习小工具，祝大家都不挂科。\nweb-paste-archive web paste 服务，因为前端不太会写咕了。\nFuckHomework 手写作业生成器，这个项目应该有很多人写了。\nauto-mail 一个自动发送邮件的小工具。\nyou-get-helper 用 you-get 下载某 up 的全部视频。\nDuiTang 堆糖爬虫，已经不能用了。为什么这种东西可以有 star？\ncomic2pdf 漫画图片转 pdf。.heimu {color: black;background-color: black;}.heimu:hover {color: white;} 本子转 pdf。 Script 自用的一些脚本。\nHeicWallpapers kde 下的 Heic 动态壁纸。\nHelloVala 请不要学习 vala。\n","permalink":"https://aimerneige.com/en/projects/","summary":"projects","title":"Projects 💻"}]